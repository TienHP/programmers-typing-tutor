{
  "id": "popular-lisp-words",
  "name": "Popular lisp words training",
  "mode": "lisp",
  "level": "beginner",
  "logo": "images/languages/lisp.png",
  "lessons": [
    {
      "exercise": "",
      "example": "\f"
    },
    {
      "exercise": "",
      "example": "0x8000"
    },
    {
      "exercise": "",
      "example": "A"
    },
    {
      "exercise": "",
      "example": "ARRAY"
    },
    {
      "exercise": "",
      "example": "Applicable"
    },
    {
      "exercise": "",
      "example": "Author"
    },
    {
      "exercise": "",
      "example": "B"
    },
    {
      "exercise": "",
      "example": "Base"
    },
    {
      "exercise": "",
      "example": "Boston"
    },
    {
      "exercise": "",
      "example": "C"
    },
    {
      "exercise": "",
      "example": "CATEGORY"
    },
    {
      "exercise": "",
      "example": "CFFI"
    },
    {
      "exercise": "",
      "example": "CIM"
    },
    {
      "exercise": "",
      "example": "CIM_EnabledLogicalElement"
    },
    {
      "exercise": "",
      "example": "CIM_ManagedSystemElement"
    },
    {
      "exercise": "",
      "example": "CL"
    },
    {
      "exercise": "",
      "example": "COMMON"
    },
    {
      "exercise": "",
      "example": "CORRESPONDENCE"
    },
    {
      "exercise": "",
      "example": "Caption"
    },
    {
      "exercise": "",
      "example": "Common"
    },
    {
      "exercise": "",
      "example": "D"
    },
    {
      "exercise": "",
      "example": "DEPRECATED"
    },
    {
      "exercise": "",
      "example": "DESCRIPTION"
    },
    {
      "exercise": "",
      "example": "DICTIONARY"
    },
    {
      "exercise": "",
      "example": "DMTF"
    },
    {
      "exercise": "",
      "example": "Degraded"
    },
    {
      "exercise": "",
      "example": "Description"
    },
    {
      "exercise": "",
      "example": "Disabled"
    },
    {
      "exercise": "",
      "example": "Dormant"
    },
    {
      "exercise": "",
      "example": "Down"
    },
    {
      "exercise": "",
      "example": "END"
    },
    {
      "exercise": "",
      "example": "ENT"
    },
    {
      "exercise": "",
      "example": "ENTLIST"
    },
    {
      "exercise": "",
      "example": "ERROR"
    },
    {
      "exercise": "",
      "example": "Emacs"
    },
    {
      "exercise": "",
      "example": "Enabled"
    },
    {
      "exercise": "",
      "example": "EnabledState"
    },
    {
      "exercise": "",
      "example": "Error"
    },
    {
      "exercise": "",
      "example": "Exp"
    },
    {
      "exercise": "",
      "example": "FILE"
    },
    {
      "exercise": "",
      "example": "FNV"
    },
    {
      "exercise": "",
      "example": "FORTRAN"
    },
    {
      "exercise": "",
      "example": "FUNCTION"
    },
    {
      "exercise": "",
      "example": "Failure"
    },
    {
      "exercise": "",
      "example": "HealthState"
    },
    {
      "exercise": "",
      "example": "IN"
    },
    {
      "exercise": "",
      "example": "INITFORM"
    },
    {
      "exercise": "",
      "example": "INT"
    },
    {
      "exercise": "",
      "example": "If"
    },
    {
      "exercise": "",
      "example": "In"
    },
    {
      "exercise": "",
      "example": "Int32"
    },
    {
      "exercise": "",
      "example": "KEY"
    },
    {
      "exercise": "",
      "example": "LEN"
    },
    {
      "exercise": "",
      "example": "LISP"
    },
    {
      "exercise": "",
      "example": "Lisp"
    },
    {
      "exercise": "",
      "example": "MA"
    },
    {
      "exercise": "",
      "example": "MAP"
    },
    {
      "exercise": "",
      "example": "MAPPING"
    },
    {
      "exercise": "",
      "example": "MAX"
    },
    {
      "exercise": "",
      "example": "METHOD"
    },
    {
      "exercise": "",
      "example": "MODEL"
    },
    {
      "exercise": "",
      "example": "Mode"
    },
    {
      "exercise": "",
      "example": "N"
    },
    {
      "exercise": "",
      "example": "NAME"
    },
    {
      "exercise": "",
      "example": "NIL"
    },
    {
      "exercise": "",
      "example": "Name"
    },
    {
      "exercise": "",
      "example": "No"
    },
    {
      "exercise": "",
      "example": "Non"
    },
    {
      "exercise": "",
      "example": "Not"
    },
    {
      "exercise": "",
      "example": "OBJ"
    },
    {
      "exercise": "",
      "example": "OF"
    },
    {
      "exercise": "",
      "example": "OK"
    },
    {
      "exercise": "",
      "example": "OR"
    },
    {
      "exercise": "",
      "example": "Offline"
    },
    {
      "exercise": "",
      "example": "OrgID"
    },
    {
      "exercise": "",
      "example": "Other"
    },
    {
      "exercise": "",
      "example": "P"
    },
    {
      "exercise": "",
      "example": "PACKAGE"
    },
    {
      "exercise": "",
      "example": "PHILOSOPHY"
    },
    {
      "exercise": "",
      "example": "Package"
    },
    {
      "exercise": "",
      "example": "Power"
    },
    {
      "exercise": "",
      "example": "Predictive"
    },
    {
      "exercise": "",
      "example": "QUALIFIERS"
    },
    {
      "exercise": "",
      "example": "Quiesce"
    },
    {
      "exercise": "",
      "example": "Redistribution"
    },
    {
      "exercise": "",
      "example": "RequestStateChange"
    },
    {
      "exercise": "",
      "example": "RequestedState"
    },
    {
      "exercise": "",
      "example": "Reserved"
    },
    {
      "exercise": "",
      "example": "Reset"
    },
    {
      "exercise": "",
      "example": "Return"
    },
    {
      "exercise": "",
      "example": "Returns"
    },
    {
      "exercise": "",
      "example": "S"
    },
    {
      "exercise": "",
      "example": "STRING"
    },
    {
      "exercise": "",
      "example": "STRINGS"
    },
    {
      "exercise": "",
      "example": "SYSTEM"
    },
    {
      "exercise": "",
      "example": "Save"
    },
    {
      "exercise": "",
      "example": "Service"
    },
    {
      "exercise": "",
      "example": "SizeI"
    },
    {
      "exercise": "",
      "example": "Starting"
    },
    {
      "exercise": "",
      "example": "Stopping"
    },
    {
      "exercise": "",
      "example": "Syntax"
    },
    {
      "exercise": "",
      "example": "T"
    },
    {
      "exercise": "",
      "example": "THE"
    },
    {
      "exercise": "",
      "example": "TYPE"
    },
    {
      "exercise": "",
      "example": "Test"
    },
    {
      "exercise": "",
      "example": "The"
    },
    {
      "exercise": "",
      "example": "This"
    },
    {
      "exercise": "",
      "example": "UINT16"
    },
    {
      "exercise": "",
      "example": "UInt32"
    },
    {
      "exercise": "",
      "example": "USA"
    },
    {
      "exercise": "",
      "example": "USE"
    },
    {
      "exercise": "",
      "example": "USER"
    },
    {
      "exercise": "",
      "example": "Unknown"
    },
    {
      "exercise": "",
      "example": "V"
    },
    {
      "exercise": "",
      "example": "VALUE"
    },
    {
      "exercise": "",
      "example": "VALUES"
    },
    {
      "exercise": "",
      "example": "VERSION_1_0"
    },
    {
      "exercise": "",
      "example": "Vendor"
    },
    {
      "exercise": "",
      "example": "We"
    },
    {
      "exercise": "",
      "example": "_"
    },
    {
      "exercise": "",
      "example": "__ros_arr_len"
    },
    {
      "exercise": "",
      "example": "__ros_str_len"
    },
    {
      "exercise": "",
      "example": "a"
    },
    {
      "exercise": "",
      "example": "above"
    },
    {
      "exercise": "",
      "example": "abox"
    },
    {
      "exercise": "",
      "example": "abs"
    },
    {
      "exercise": "",
      "example": "abserr"
    },
    {
      "exercise": "",
      "example": "absolute"
    },
    {
      "exercise": "",
      "example": "acc"
    },
    {
      "exercise": "",
      "example": "accessor"
    },
    {
      "exercise": "",
      "example": "action"
    },
    {
      "exercise": "",
      "example": "add"
    },
    {
      "exercise": "",
      "example": "address"
    },
    {
      "exercise": "",
      "example": "after"
    },
    {
      "exercise": "",
      "example": "alien"
    },
    {
      "exercise": "",
      "example": "alist"
    },
    {
      "exercise": "",
      "example": "all"
    },
    {
      "exercise": "",
      "example": "allegro"
    },
    {
      "exercise": "",
      "example": "allocation"
    },
    {
      "exercise": "",
      "example": "allow"
    },
    {
      "exercise": "",
      "example": "alpha"
    },
    {
      "exercise": "",
      "example": "also"
    },
    {
      "exercise": "",
      "example": "an"
    },
    {
      "exercise": "",
      "example": "and"
    },
    {
      "exercise": "",
      "example": "ansi"
    },
    {
      "exercise": "",
      "example": "any"
    },
    {
      "exercise": "",
      "example": "app"
    },
    {
      "exercise": "",
      "example": "append"
    },
    {
      "exercise": "",
      "example": "apply"
    },
    {
      "exercise": "",
      "example": "are"
    },
    {
      "exercise": "",
      "example": "aref"
    },
    {
      "exercise": "",
      "example": "arg"
    },
    {
      "exercise": "",
      "example": "arg1"
    },
    {
      "exercise": "",
      "example": "arg2"
    },
    {
      "exercise": "",
      "example": "arglist"
    },
    {
      "exercise": "",
      "example": "args"
    },
    {
      "exercise": "",
      "example": "argument"
    },
    {
      "exercise": "",
      "example": "arguments"
    },
    {
      "exercise": "",
      "example": "array"
    },
    {
      "exercise": "",
      "example": "as"
    },
    {
      "exercise": "",
      "example": "asdf"
    },
    {
      "exercise": "",
      "example": "assert"
    },
    {
      "exercise": "",
      "example": "assoc"
    },
    {
      "exercise": "",
      "example": "at"
    },
    {
      "exercise": "",
      "example": "atom"
    },
    {
      "exercise": "",
      "example": "auto"
    },
    {
      "exercise": "",
      "example": "aux"
    },
    {
      "exercise": "",
      "example": "available"
    },
    {
      "exercise": "",
      "example": "b"
    },
    {
      "exercise": "",
      "example": "b0"
    },
    {
      "exercise": "",
      "example": "b1"
    },
    {
      "exercise": "",
      "example": "b2"
    },
    {
      "exercise": "",
      "example": "b3"
    },
    {
      "exercise": "",
      "example": "b5"
    },
    {
      "exercise": "",
      "example": "b7"
    },
    {
      "exercise": "",
      "example": "backend"
    },
    {
      "exercise": "",
      "example": "backtrace"
    },
    {
      "exercise": "",
      "example": "bar"
    },
    {
      "exercise": "",
      "example": "base"
    },
    {
      "exercise": "",
      "example": "be"
    },
    {
      "exercise": "",
      "example": "before"
    },
    {
      "exercise": "",
      "example": "being"
    },
    {
      "exercise": "",
      "example": "below"
    },
    {
      "exercise": "",
      "example": "bigfloat"
    },
    {
      "exercise": "",
      "example": "binary"
    },
    {
      "exercise": "",
      "example": "bind"
    },
    {
      "exercise": "",
      "example": "binding"
    },
    {
      "exercise": "",
      "example": "bindings"
    },
    {
      "exercise": "",
      "example": "bit"
    },
    {
      "exercise": "",
      "example": "bits"
    },
    {
      "exercise": "",
      "example": "block"
    },
    {
      "exercise": "",
      "example": "body"
    },
    {
      "exercise": "",
      "example": "boolean"
    },
    {
      "exercise": "",
      "example": "border"
    },
    {
      "exercise": "",
      "example": "boundp"
    },
    {
      "exercise": "",
      "example": "break"
    },
    {
      "exercise": "",
      "example": "buffer"
    },
    {
      "exercise": "",
      "example": "but"
    },
    {
      "exercise": "",
      "example": "button"
    },
    {
      "exercise": "",
      "example": "by"
    },
    {
      "exercise": "",
      "example": "byte"
    },
    {
      "exercise": "",
      "example": "bytes"
    },
    {
      "exercise": "",
      "example": "c"
    },
    {
      "exercise": "",
      "example": "caar"
    },
    {
      "exercise": "",
      "example": "cache"
    },
    {
      "exercise": "",
      "example": "cadr"
    },
    {
      "exercise": "",
      "example": "call"
    },
    {
      "exercise": "",
      "example": "called"
    },
    {
      "exercise": "",
      "example": "calls"
    },
    {
      "exercise": "",
      "example": "can"
    },
    {
      "exercise": "",
      "example": "car"
    },
    {
      "exercise": "",
      "example": "carried"
    },
    {
      "exercise": "",
      "example": "case"
    },
    {
      "exercise": "",
      "example": "cat"
    },
    {
      "exercise": "",
      "example": "category"
    },
    {
      "exercise": "",
      "example": "cbuf"
    },
    {
      "exercise": "",
      "example": "ccl"
    },
    {
      "exercise": "",
      "example": "cddr"
    },
    {
      "exercise": "",
      "example": "cdr"
    },
    {
      "exercise": "",
      "example": "cffi"
    },
    {
      "exercise": "",
      "example": "ch"
    },
    {
      "exercise": "",
      "example": "char"
    },
    {
      "exercise": "",
      "example": "character"
    },
    {
      "exercise": "",
      "example": "check"
    },
    {
      "exercise": "",
      "example": "child"
    },
    {
      "exercise": "",
      "example": "children"
    },
    {
      "exercise": "",
      "example": "cl"
    },
    {
      "exercise": "",
      "example": "class"
    },
    {
      "exercise": "",
      "example": "clause"
    },
    {
      "exercise": "",
      "example": "clear"
    },
    {
      "exercise": "",
      "example": "clisp"
    },
    {
      "exercise": "",
      "example": "close"
    },
    {
      "exercise": "",
      "example": "closure"
    },
    {
      "exercise": "",
      "example": "cmu"
    },
    {
      "exercise": "",
      "example": "code"
    },
    {
      "exercise": "",
      "example": "coding"
    },
    {
      "exercise": "",
      "example": "coerce"
    },
    {
      "exercise": "",
      "example": "collect"
    },
    {
      "exercise": "",
      "example": "color"
    },
    {
      "exercise": "",
      "example": "com"
    },
    {
      "exercise": "",
      "example": "command"
    },
    {
      "exercise": "",
      "example": "commands"
    },
    {
      "exercise": "",
      "example": "common"
    },
    {
      "exercise": "",
      "example": "compilation"
    },
    {
      "exercise": "",
      "example": "compile"
    },
    {
      "exercise": "",
      "example": "compiled"
    },
    {
      "exercise": "",
      "example": "compiler"
    },
    {
      "exercise": "",
      "example": "complex"
    },
    {
      "exercise": "",
      "example": "complex16"
    },
    {
      "exercise": "",
      "example": "component"
    },
    {
      "exercise": "",
      "example": "components"
    },
    {
      "exercise": "",
      "example": "compute"
    },
    {
      "exercise": "",
      "example": "computer"
    },
    {
      "exercise": "",
      "example": "concatenate"
    },
    {
      "exercise": "",
      "example": "cond"
    },
    {
      "exercise": "",
      "example": "condition"
    },
    {
      "exercise": "",
      "example": "conditions"
    },
    {
      "exercise": "",
      "example": "configuration"
    },
    {
      "exercise": "",
      "example": "connection"
    },
    {
      "exercise": "",
      "example": "cons"
    },
    {
      "exercise": "",
      "example": "consp"
    },
    {
      "exercise": "",
      "example": "const"
    },
    {
      "exercise": "",
      "example": "constant"
    },
    {
      "exercise": "",
      "example": "content"
    },
    {
      "exercise": "",
      "example": "contents"
    },
    {
      "exercise": "",
      "example": "context"
    },
    {
      "exercise": "",
      "example": "control"
    },
    {
      "exercise": "",
      "example": "copy"
    },
    {
      "exercise": "",
      "example": "count"
    },
    {
      "exercise": "",
      "example": "counter"
    },
    {
      "exercise": "",
      "example": "create"
    },
    {
      "exercise": "",
      "example": "current"
    },
    {
      "exercise": "",
      "example": "d"
    },
    {
      "exercise": "",
      "example": "data"
    },
    {
      "exercise": "",
      "example": "database"
    },
    {
      "exercise": "",
      "example": "date"
    },
    {
      "exercise": "",
      "example": "db"
    },
    {
      "exercise": "",
      "example": "debug"
    },
    {
      "exercise": "",
      "example": "debugger"
    },
    {
      "exercise": "",
      "example": "decf"
    },
    {
      "exercise": "",
      "example": "decl"
    },
    {
      "exercise": "",
      "example": "declarations"
    },
    {
      "exercise": "",
      "example": "declare"
    },
    {
      "exercise": "",
      "example": "decls"
    },
    {
      "exercise": "",
      "example": "decode"
    },
    {
      "exercise": "",
      "example": "def"
    },
    {
      "exercise": "",
      "example": "default"
    },
    {
      "exercise": "",
      "example": "defaults"
    },
    {
      "exercise": "",
      "example": "defclass"
    },
    {
      "exercise": "",
      "example": "defconstant"
    },
    {
      "exercise": "",
      "example": "defgeneric"
    },
    {
      "exercise": "",
      "example": "defimplementation"
    },
    {
      "exercise": "",
      "example": "define"
    },
    {
      "exercise": "",
      "example": "defined"
    },
    {
      "exercise": "",
      "example": "definition"
    },
    {
      "exercise": "",
      "example": "definitions"
    },
    {
      "exercise": "",
      "example": "definterface"
    },
    {
      "exercise": "",
      "example": "defmacro"
    },
    {
      "exercise": "",
      "example": "defmethod"
    },
    {
      "exercise": "",
      "example": "defparameter"
    },
    {
      "exercise": "",
      "example": "defslimefun"
    },
    {
      "exercise": "",
      "example": "defun"
    },
    {
      "exercise": "",
      "example": "defvar"
    },
    {
      "exercise": "",
      "example": "delete"
    },
    {
      "exercise": "",
      "example": "deprecated"
    },
    {
      "exercise": "",
      "example": "depth"
    },
    {
      "exercise": "",
      "example": "describe"
    },
    {
      "exercise": "",
      "example": "describes"
    },
    {
      "exercise": "",
      "example": "description"
    },
    {
      "exercise": "",
      "example": "destructuring"
    },
    {
      "exercise": "",
      "example": "device"
    },
    {
      "exercise": "",
      "example": "di"
    },
    {
      "exercise": "",
      "example": "dir"
    },
    {
      "exercise": "",
      "example": "direct"
    },
    {
      "exercise": "",
      "example": "direction"
    },
    {
      "exercise": "",
      "example": "directory"
    },
    {
      "exercise": "",
      "example": "display"
    },
    {
      "exercise": "",
      "example": "distribution"
    },
    {
      "exercise": "",
      "example": "div"
    },
    {
      "exercise": "",
      "example": "do"
    },
    {
      "exercise": "",
      "example": "doc"
    },
    {
      "exercise": "",
      "example": "documentary"
    },
    {
      "exercise": "",
      "example": "documentation"
    },
    {
      "exercise": "",
      "example": "does"
    },
    {
      "exercise": "",
      "example": "dolist"
    },
    {
      "exercise": "",
      "example": "done"
    },
    {
      "exercise": "",
      "example": "dotimes"
    },
    {
      "exercise": "",
      "example": "double"
    },
    {
      "exercise": "",
      "example": "drama"
    },
    {
      "exercise": "",
      "example": "draw"
    },
    {
      "exercise": "",
      "example": "dspec"
    },
    {
      "exercise": "",
      "example": "dynamic"
    },
    {
      "exercise": "",
      "example": "e"
    },
    {
      "exercise": "",
      "example": "each"
    },
    {
      "exercise": "",
      "example": "eax"
    },
    {
      "exercise": "",
      "example": "ebp"
    },
    {
      "exercise": "",
      "example": "ecase"
    },
    {
      "exercise": "",
      "example": "ecl"
    },
    {
      "exercise": "",
      "example": "element"
    },
    {
      "exercise": "",
      "example": "elements"
    },
    {
      "exercise": "",
      "example": "else"
    },
    {
      "exercise": "",
      "example": "elt"
    },
    {
      "exercise": "",
      "example": "emacs"
    },
    {
      "exercise": "",
      "example": "emit"
    },
    {
      "exercise": "",
      "example": "empty"
    },
    {
      "exercise": "",
      "example": "enable"
    },
    {
      "exercise": "",
      "example": "encoding"
    },
    {
      "exercise": "",
      "example": "end"
    },
    {
      "exercise": "",
      "example": "end_label"
    },
    {
      "exercise": "",
      "example": "english"
    },
    {
      "exercise": "",
      "example": "ensure"
    },
    {
      "exercise": "",
      "example": "entry"
    },
    {
      "exercise": "",
      "example": "enum"
    },
    {
      "exercise": "",
      "example": "env"
    },
    {
      "exercise": "",
      "example": "environment"
    },
    {
      "exercise": "",
      "example": "eq"
    },
    {
      "exercise": "",
      "example": "eql"
    },
    {
      "exercise": "",
      "example": "equal"
    },
    {
      "exercise": "",
      "example": "equalp"
    },
    {
      "exercise": "",
      "example": "err"
    },
    {
      "exercise": "",
      "example": "error"
    },
    {
      "exercise": "",
      "example": "errors"
    },
    {
      "exercise": "",
      "example": "escape"
    },
    {
      "exercise": "",
      "example": "etypecase"
    },
    {
      "exercise": "",
      "example": "eu"
    },
    {
      "exercise": "",
      "example": "eval"
    },
    {
      "exercise": "",
      "example": "event"
    },
    {
      "exercise": "",
      "example": "events"
    },
    {
      "exercise": "",
      "example": "ex"
    },
    {
      "exercise": "",
      "example": "excl"
    },
    {
      "exercise": "",
      "example": "execute"
    },
    {
      "exercise": "",
      "example": "exist"
    },
    {
      "exercise": "",
      "example": "exists"
    },
    {
      "exercise": "",
      "example": "exit"
    },
    {
      "exercise": "",
      "example": "exp"
    },
    {
      "exercise": "",
      "example": "expand"
    },
    {
      "exercise": "",
      "example": "expected"
    },
    {
      "exercise": "",
      "example": "export"
    },
    {
      "exercise": "",
      "example": "expr"
    },
    {
      "exercise": "",
      "example": "expression"
    },
    {
      "exercise": "",
      "example": "ext"
    },
    {
      "exercise": "",
      "example": "external"
    },
    {
      "exercise": "",
      "example": "f"
    },
    {
      "exercise": "",
      "example": "f2cl"
    },
    {
      "exercise": "",
      "example": "failure"
    },
    {
      "exercise": "",
      "example": "false"
    },
    {
      "exercise": "",
      "example": "fasl"
    },
    {
      "exercise": "",
      "example": "fd"
    },
    {
      "exercise": "",
      "example": "fdo"
    },
    {
      "exercise": "",
      "example": "features"
    },
    {
      "exercise": "",
      "example": "field"
    },
    {
      "exercise": "",
      "example": "file"
    },
    {
      "exercise": "",
      "example": "filename"
    },
    {
      "exercise": "",
      "example": "files"
    },
    {
      "exercise": "",
      "example": "fill"
    },
    {
      "exercise": "",
      "example": "finally"
    },
    {
      "exercise": "",
      "example": "find"
    },
    {
      "exercise": "",
      "example": "finish"
    },
    {
      "exercise": "",
      "example": "first"
    },
    {
      "exercise": "",
      "example": "fixnum"
    },
    {
      "exercise": "",
      "example": "flag"
    },
    {
      "exercise": "",
      "example": "flags"
    },
    {
      "exercise": "",
      "example": "flet"
    },
    {
      "exercise": "",
      "example": "float"
    },
    {
      "exercise": "",
      "example": "fn"
    },
    {
      "exercise": "",
      "example": "fname"
    },
    {
      "exercise": "",
      "example": "following"
    },
    {
      "exercise": "",
      "example": "font"
    },
    {
      "exercise": "",
      "example": "foo"
    },
    {
      "exercise": "",
      "example": "for"
    },
    {
      "exercise": "",
      "example": "force"
    },
    {
      "exercise": "",
      "example": "foreign"
    },
    {
      "exercise": "",
      "example": "form"
    },
    {
      "exercise": "",
      "example": "format"
    },
    {
      "exercise": "",
      "example": "forms"
    },
    {
      "exercise": "",
      "example": "fortran"
    },
    {
      "exercise": "",
      "example": "found"
    },
    {
      "exercise": "",
      "example": "frame"
    },
    {
      "exercise": "",
      "example": "free"
    },
    {
      "exercise": "",
      "example": "fref"
    },
    {
      "exercise": "",
      "example": "fresh"
    },
    {
      "exercise": "",
      "example": "from"
    },
    {
      "exercise": "",
      "example": "fspec"
    },
    {
      "exercise": "",
      "example": "fst"
    },
    {
      "exercise": "",
      "example": "fun"
    },
    {
      "exercise": "",
      "example": "funcall"
    },
    {
      "exercise": "",
      "example": "function"
    },
    {
      "exercise": "",
      "example": "functioning"
    },
    {
      "exercise": "",
      "example": "functions"
    },
    {
      "exercise": "",
      "example": "g"
    },
    {
      "exercise": "",
      "example": "g212"
    },
    {
      "exercise": "",
      "example": "g6"
    },
    {
      "exercise": "",
      "example": "gc"
    },
    {
      "exercise": "",
      "example": "gcl"
    },
    {
      "exercise": "",
      "example": "generated"
    },
    {
      "exercise": "",
      "example": "generic"
    },
    {
      "exercise": "",
      "example": "gensym"
    },
    {
      "exercise": "",
      "example": "get"
    },
    {
      "exercise": "",
      "example": "getf"
    },
    {
      "exercise": "",
      "example": "gethash"
    },
    {
      "exercise": "",
      "example": "gf"
    },
    {
      "exercise": "",
      "example": "gl"
    },
    {
      "exercise": "",
      "example": "go"
    },
    {
      "exercise": "",
      "example": "goal"
    },
    {
      "exercise": "",
      "example": "group"
    },
    {
      "exercise": "",
      "example": "h"
    },
    {
      "exercise": "",
      "example": "handle"
    },
    {
      "exercise": "",
      "example": "handler"
    },
    {
      "exercise": "",
      "example": "has"
    },
    {
      "exercise": "",
      "example": "hash"
    },
    {
      "exercise": "",
      "example": "have"
    },
    {
      "exercise": "",
      "example": "head"
    },
    {
      "exercise": "",
      "example": "header"
    },
    {
      "exercise": "",
      "example": "height"
    },
    {
      "exercise": "",
      "example": "history"
    },
    {
      "exercise": "",
      "example": "hook"
    },
    {
      "exercise": "",
      "example": "host"
    },
    {
      "exercise": "",
      "example": "html"
    },
    {
      "exercise": "",
      "example": "http"
    },
    {
      "exercise": "",
      "example": "i"
    },
    {
      "exercise": "",
      "example": "id"
    },
    {
      "exercise": "",
      "example": "identity"
    },
    {
      "exercise": "",
      "example": "ierr"
    },
    {
      "exercise": "",
      "example": "if"
    },
    {
      "exercise": "",
      "example": "ignorable"
    },
    {
      "exercise": "",
      "example": "ignore"
    },
    {
      "exercise": "",
      "example": "image"
    },
    {
      "exercise": "",
      "example": "implementation"
    },
    {
      "exercise": "",
      "example": "import"
    },
    {
      "exercise": "",
      "example": "in"
    },
    {
      "exercise": "",
      "example": "incf"
    },
    {
      "exercise": "",
      "example": "incx"
    },
    {
      "exercise": "",
      "example": "indent"
    },
    {
      "exercise": "",
      "example": "indentation"
    },
    {
      "exercise": "",
      "example": "index"
    },
    {
      "exercise": "",
      "example": "indicates"
    },
    {
      "exercise": "",
      "example": "info"
    },
    {
      "exercise": "",
      "example": "informatimago"
    },
    {
      "exercise": "",
      "example": "inherit"
    },
    {
      "exercise": "",
      "example": "init"
    },
    {
      "exercise": "",
      "example": "initarg"
    },
    {
      "exercise": "",
      "example": "initargs"
    },
    {
      "exercise": "",
      "example": "initform"
    },
    {
      "exercise": "",
      "example": "initial"
    },
    {
      "exercise": "",
      "example": "initialize"
    },
    {
      "exercise": "",
      "example": "input"
    },
    {
      "exercise": "",
      "example": "inspect"
    },
    {
      "exercise": "",
      "example": "inspector"
    },
    {
      "exercise": "",
      "example": "instance"
    },
    {
      "exercise": "",
      "example": "int"
    },
    {
      "exercise": "",
      "example": "integer"
    },
    {
      "exercise": "",
      "example": "integer4"
    },
    {
      "exercise": "",
      "example": "intern"
    },
    {
      "exercise": "",
      "example": "internal"
    },
    {
      "exercise": "",
      "example": "interrupt"
    },
    {
      "exercise": "",
      "example": "interrupts"
    },
    {
      "exercise": "",
      "example": "into"
    },
    {
      "exercise": "",
      "example": "invalid"
    },
    {
      "exercise": "",
      "example": "invoke"
    },
    {
      "exercise": "",
      "example": "io"
    },
    {
      "exercise": "",
      "example": "is"
    },
    {
      "exercise": "",
      "example": "istate"
    },
    {
      "exercise": "",
      "example": "istream"
    },
    {
      "exercise": "",
      "example": "it"
    },
    {
      "exercise": "",
      "example": "item"
    },
    {
      "exercise": "",
      "example": "iwork"
    },
    {
      "exercise": "",
      "example": "ix"
    },
    {
      "exercise": "",
      "example": "j"
    },
    {
      "exercise": "",
      "example": "java"
    },
    {
      "exercise": "",
      "example": "k"
    },
    {
      "exercise": "",
      "example": "kernel"
    },
    {
      "exercise": "",
      "example": "key"
    },
    {
      "exercise": "",
      "example": "keys"
    },
    {
      "exercise": "",
      "example": "keyword"
    },
    {
      "exercise": "",
      "example": "keywords"
    },
    {
      "exercise": "",
      "example": "kind"
    },
    {
      "exercise": "",
      "example": "known"
    },
    {
      "exercise": "",
      "example": "l"
    },
    {
      "exercise": "",
      "example": "label"
    },
    {
      "exercise": "",
      "example": "labels"
    },
    {
      "exercise": "",
      "example": "lambda"
    },
    {
      "exercise": "",
      "example": "language"
    },
    {
      "exercise": "",
      "example": "lap"
    },
    {
      "exercise": "",
      "example": "last"
    },
    {
      "exercise": "",
      "example": "lda"
    },
    {
      "exercise": "",
      "example": "ldb"
    },
    {
      "exercise": "",
      "example": "ldc"
    },
    {
      "exercise": "",
      "example": "left"
    },
    {
      "exercise": "",
      "example": "len"
    },
    {
      "exercise": "",
      "example": "length"
    },
    {
      "exercise": "",
      "example": "let"
    },
    {
      "exercise": "",
      "example": "level"
    },
    {
      "exercise": "",
      "example": "lib"
    },
    {
      "exercise": "",
      "example": "library"
    },
    {
      "exercise": "",
      "example": "limit"
    },
    {
      "exercise": "",
      "example": "line"
    },
    {
      "exercise": "",
      "example": "lisp"
    },
    {
      "exercise": "",
      "example": "lispworks"
    },
    {
      "exercise": "",
      "example": "list"
    },
    {
      "exercise": "",
      "example": "listp"
    },
    {
      "exercise": "",
      "example": "load"
    },
    {
      "exercise": "",
      "example": "loc"
    },
    {
      "exercise": "",
      "example": "local"
    },
    {
      "exercise": "",
      "example": "location"
    },
    {
      "exercise": "",
      "example": "lock"
    },
    {
      "exercise": "",
      "example": "log"
    },
    {
      "exercise": "",
      "example": "logical"
    },
    {
      "exercise": "",
      "example": "logxor"
    },
    {
      "exercise": "",
      "example": "long"
    },
    {
      "exercise": "",
      "example": "loop"
    },
    {
      "exercise": "",
      "example": "lst"
    },
    {
      "exercise": "",
      "example": "m"
    },
    {
      "exercise": "",
      "example": "macro"
    },
    {
      "exercise": "",
      "example": "macros"
    },
    {
      "exercise": "",
      "example": "made"
    },
    {
      "exercise": "",
      "example": "mailbox"
    },
    {
      "exercise": "",
      "example": "main"
    },
    {
      "exercise": "",
      "example": "make"
    },
    {
      "exercise": "",
      "example": "mal"
    },
    {
      "exercise": "",
      "example": "map"
    },
    {
      "exercise": "",
      "example": "mapcar"
    },
    {
      "exercise": "",
      "example": "match"
    },
    {
      "exercise": "",
      "example": "matcher"
    },
    {
      "exercise": "",
      "example": "matrix"
    },
    {
      "exercise": "",
      "example": "max"
    },
    {
      "exercise": "",
      "example": "maxima"
    },
    {
      "exercise": "",
      "example": "maybe"
    },
    {
      "exercise": "",
      "example": "mbox"
    },
    {
      "exercise": "",
      "example": "medium"
    },
    {
      "exercise": "",
      "example": "mem"
    },
    {
      "exercise": "",
      "example": "member"
    },
    {
      "exercise": "",
      "example": "menu"
    },
    {
      "exercise": "",
      "example": "merge"
    },
    {
      "exercise": "",
      "example": "message"
    },
    {
      "exercise": "",
      "example": "met"
    },
    {
      "exercise": "",
      "example": "method"
    },
    {
      "exercise": "",
      "example": "methods"
    },
    {
      "exercise": "",
      "example": "mexpt"
    },
    {
      "exercise": "",
      "example": "michele"
    },
    {
      "exercise": "",
      "example": "might"
    },
    {
      "exercise": "",
      "example": "min"
    },
    {
      "exercise": "",
      "example": "missing"
    },
    {
      "exercise": "",
      "example": "mlist"
    },
    {
      "exercise": "",
      "example": "mod64"
    },
    {
      "exercise": "",
      "example": "mode"
    },
    {
      "exercise": "",
      "example": "module"
    },
    {
      "exercise": "",
      "example": "mop"
    },
    {
      "exercise": "",
      "example": "more"
    },
    {
      "exercise": "",
      "example": "most"
    },
    {
      "exercise": "",
      "example": "mov"
    },
    {
      "exercise": "",
      "example": "move"
    },
    {
      "exercise": "",
      "example": "movie"
    },
    {
      "exercise": "",
      "example": "mp"
    },
    {
      "exercise": "",
      "example": "mplus"
    },
    {
      "exercise": "",
      "example": "msg"
    },
    {
      "exercise": "",
      "example": "mtimes"
    },
    {
      "exercise": "",
      "example": "mul"
    },
    {
      "exercise": "",
      "example": "multiple"
    },
    {
      "exercise": "",
      "example": "must"
    },
    {
      "exercise": "",
      "example": "mutex"
    },
    {
      "exercise": "",
      "example": "n"
    },
    {
      "exercise": "",
      "example": "name"
    },
    {
      "exercise": "",
      "example": "names"
    },
    {
      "exercise": "",
      "example": "namestring"
    },
    {
      "exercise": "",
      "example": "nconc"
    },
    {
      "exercise": "",
      "example": "needed"
    },
    {
      "exercise": "",
      "example": "new"
    },
    {
      "exercise": "",
      "example": "newline"
    },
    {
      "exercise": "",
      "example": "next"
    },
    {
      "exercise": "",
      "example": "nil"
    },
    {
      "exercise": "",
      "example": "no"
    },
    {
      "exercise": "",
      "example": "node"
    },
    {
      "exercise": "",
      "example": "non"
    },
    {
      "exercise": "",
      "example": "normal"
    },
    {
      "exercise": "",
      "example": "not"
    },
    {
      "exercise": "",
      "example": "note"
    },
    {
      "exercise": "",
      "example": "now"
    },
    {
      "exercise": "",
      "example": "nreverse"
    },
    {
      "exercise": "",
      "example": "nth"
    },
    {
      "exercise": "",
      "example": "null"
    },
    {
      "exercise": "",
      "example": "num"
    },
    {
      "exercise": "",
      "example": "number"
    },
    {
      "exercise": "",
      "example": "o"
    },
    {
      "exercise": "",
      "example": "obj"
    },
    {
      "exercise": "",
      "example": "object"
    },
    {
      "exercise": "",
      "example": "objects"
    },
    {
      "exercise": "",
      "example": "odysseus"
    },
    {
      "exercise": "",
      "example": "of"
    },
    {
      "exercise": "",
      "example": "offset"
    },
    {
      "exercise": "",
      "example": "ok"
    },
    {
      "exercise": "",
      "example": "old"
    },
    {
      "exercise": "",
      "example": "on"
    },
    {
      "exercise": "",
      "example": "one"
    },
    {
      "exercise": "",
      "example": "only"
    },
    {
      "exercise": "",
      "example": "op"
    },
    {
      "exercise": "",
      "example": "open"
    },
    {
      "exercise": "",
      "example": "opengl"
    },
    {
      "exercise": "",
      "example": "openmcl"
    },
    {
      "exercise": "",
      "example": "operation"
    },
    {
      "exercise": "",
      "example": "operator"
    },
    {
      "exercise": "",
      "example": "optimize"
    },
    {
      "exercise": "",
      "example": "option"
    },
    {
      "exercise": "",
      "example": "optional"
    },
    {
      "exercise": "",
      "example": "options"
    },
    {
      "exercise": "",
      "example": "or"
    },
    {
      "exercise": "",
      "example": "order"
    },
    {
      "exercise": "",
      "example": "orig"
    },
    {
      "exercise": "",
      "example": "original"
    },
    {
      "exercise": "",
      "example": "ostream"
    },
    {
      "exercise": "",
      "example": "other"
    },
    {
      "exercise": "",
      "example": "otherwise"
    },
    {
      "exercise": "",
      "example": "out"
    },
    {
      "exercise": "",
      "example": "output"
    },
    {
      "exercise": "",
      "example": "p"
    },
    {
      "exercise": "",
      "example": "package"
    },
    {
      "exercise": "",
      "example": "pair"
    },
    {
      "exercise": "",
      "example": "pane"
    },
    {
      "exercise": "",
      "example": "param"
    },
    {
      "exercise": "",
      "example": "parameter"
    },
    {
      "exercise": "",
      "example": "parameters"
    },
    {
      "exercise": "",
      "example": "params"
    },
    {
      "exercise": "",
      "example": "parent"
    },
    {
      "exercise": "",
      "example": "parse"
    },
    {
      "exercise": "",
      "example": "part"
    },
    {
      "exercise": "",
      "example": "pasin"
    },
    {
      "exercise": "",
      "example": "path"
    },
    {
      "exercise": "",
      "example": "pathname"
    },
    {
      "exercise": "",
      "example": "pathnames"
    },
    {
      "exercise": "",
      "example": "pattern"
    },
    {
      "exercise": "",
      "example": "per"
    },
    {
      "exercise": "",
      "example": "physical"
    },
    {
      "exercise": "",
      "example": "place"
    },
    {
      "exercise": "",
      "example": "plan"
    },
    {
      "exercise": "",
      "example": "plist"
    },
    {
      "exercise": "",
      "example": "pname"
    },
    {
      "exercise": "",
      "example": "point"
    },
    {
      "exercise": "",
      "example": "pointer"
    },
    {
      "exercise": "",
      "example": "points"
    },
    {
      "exercise": "",
      "example": "policy"
    },
    {
      "exercise": "",
      "example": "pop"
    },
    {
      "exercise": "",
      "example": "port"
    },
    {
      "exercise": "",
      "example": "pos"
    },
    {
      "exercise": "",
      "example": "position"
    },
    {
      "exercise": "",
      "example": "power"
    },
    {
      "exercise": "",
      "example": "pprint"
    },
    {
      "exercise": "",
      "example": "pred"
    },
    {
      "exercise": "",
      "example": "predicate"
    },
    {
      "exercise": "",
      "example": "prefix"
    },
    {
      "exercise": "",
      "example": "pretty"
    },
    {
      "exercise": "",
      "example": "previous"
    },
    {
      "exercise": "",
      "example": "princ"
    },
    {
      "exercise": "",
      "example": "print"
    },
    {
      "exercise": "",
      "example": "probe"
    },
    {
      "exercise": "",
      "example": "process"
    },
    {
      "exercise": "",
      "example": "profile"
    },
    {
      "exercise": "",
      "example": "prog1"
    },
    {
      "exercise": "",
      "example": "progn"
    },
    {
      "exercise": "",
      "example": "program"
    },
    {
      "exercise": "",
      "example": "progress"
    },
    {
      "exercise": "",
      "example": "prompt"
    },
    {
      "exercise": "",
      "example": "property"
    },
    {
      "exercise": "",
      "example": "protect"
    },
    {
      "exercise": "",
      "example": "protocol"
    },
    {
      "exercise": "",
      "example": "provided"
    },
    {
      "exercise": "",
      "example": "ptr"
    },
    {
      "exercise": "",
      "example": "push"
    },
    {
      "exercise": "",
      "example": "q"
    },
    {
      "exercise": "",
      "example": "query"
    },
    {
      "exercise": "",
      "example": "queue"
    },
    {
      "exercise": "",
      "example": "quit"
    },
    {
      "exercise": "",
      "example": "r"
    },
    {
      "exercise": "",
      "example": "random"
    },
    {
      "exercise": "",
      "example": "range"
    },
    {
      "exercise": "",
      "example": "rat"
    },
    {
      "exercise": "",
      "example": "read"
    },
    {
      "exercise": "",
      "example": "reader"
    },
    {
      "exercise": "",
      "example": "readtable"
    },
    {
      "exercise": "",
      "example": "real"
    },
    {
      "exercise": "",
      "example": "record"
    },
    {
      "exercise": "",
      "example": "ref"
    },
    {
      "exercise": "",
      "example": "reg"
    },
    {
      "exercise": "",
      "example": "regex"
    },
    {
      "exercise": "",
      "example": "register"
    },
    {
      "exercise": "",
      "example": "registry"
    },
    {
      "exercise": "",
      "example": "relative"
    },
    {
      "exercise": "",
      "example": "remaining"
    },
    {
      "exercise": "",
      "example": "remove"
    },
    {
      "exercise": "",
      "example": "repeat"
    },
    {
      "exercise": "",
      "example": "report"
    },
    {
      "exercise": "",
      "example": "representation"
    },
    {
      "exercise": "",
      "example": "request"
    },
    {
      "exercise": "",
      "example": "requests"
    },
    {
      "exercise": "",
      "example": "require"
    },
    {
      "exercise": "",
      "example": "required"
    },
    {
      "exercise": "",
      "example": "res"
    },
    {
      "exercise": "",
      "example": "resolve"
    },
    {
      "exercise": "",
      "example": "rest"
    },
    {
      "exercise": "",
      "example": "restart"
    },
    {
      "exercise": "",
      "example": "result"
    },
    {
      "exercise": "",
      "example": "results"
    },
    {
      "exercise": "",
      "example": "ret"
    },
    {
      "exercise": "",
      "example": "return"
    },
    {
      "exercise": "",
      "example": "rev"
    },
    {
      "exercise": "",
      "example": "right"
    },
    {
      "exercise": "",
      "example": "rol64"
    },
    {
      "exercise": "",
      "example": "role"
    },
    {
      "exercise": "",
      "example": "root"
    },
    {
      "exercise": "",
      "example": "ror64"
    },
    {
      "exercise": "",
      "example": "roslisp"
    },
    {
      "exercise": "",
      "example": "rtoy"
    },
    {
      "exercise": "",
      "example": "run"
    },
    {
      "exercise": "",
      "example": "s"
    },
    {
      "exercise": "",
      "example": "s0"
    },
    {
      "exercise": "",
      "example": "s1"
    },
    {
      "exercise": "",
      "example": "s2"
    },
    {
      "exercise": "",
      "example": "safe"
    },
    {
      "exercise": "",
      "example": "safety"
    },
    {
      "exercise": "",
      "example": "same"
    },
    {
      "exercise": "",
      "example": "save"
    },
    {
      "exercise": "",
      "example": "sb"
    },
    {
      "exercise": "",
      "example": "sbcl"
    },
    {
      "exercise": "",
      "example": "scanner"
    },
    {
      "exercise": "",
      "example": "screen"
    },
    {
      "exercise": "",
      "example": "sdl"
    },
    {
      "exercise": "",
      "example": "search"
    },
    {
      "exercise": "",
      "example": "second"
    },
    {
      "exercise": "",
      "example": "self"
    },
    {
      "exercise": "",
      "example": "send"
    },
    {
      "exercise": "",
      "example": "seq"
    },
    {
      "exercise": "",
      "example": "sequence"
    },
    {
      "exercise": "",
      "example": "server"
    },
    {
      "exercise": "",
      "example": "set"
    },
    {
      "exercise": "",
      "example": "setf"
    },
    {
      "exercise": "",
      "example": "setq"
    },
    {
      "exercise": "",
      "example": "settings"
    },
    {
      "exercise": "",
      "example": "sheet"
    },
    {
      "exercise": "",
      "example": "short"
    },
    {
      "exercise": "",
      "example": "should"
    },
    {
      "exercise": "",
      "example": "si"
    },
    {
      "exercise": "",
      "example": "signal"
    },
    {
      "exercise": "",
      "example": "simp"
    },
    {
      "exercise": "",
      "example": "simple"
    },
    {
      "exercise": "",
      "example": "simplify"
    },
    {
      "exercise": "",
      "example": "single"
    },
    {
      "exercise": "",
      "example": "size"
    },
    {
      "exercise": "",
      "example": "sizei"
    },
    {
      "exercise": "",
      "example": "sldb"
    },
    {
      "exercise": "",
      "example": "slice"
    },
    {
      "exercise": "",
      "example": "slime"
    },
    {
      "exercise": "",
      "example": "slot"
    },
    {
      "exercise": "",
      "example": "slots"
    },
    {
      "exercise": "",
      "example": "snd"
    },
    {
      "exercise": "",
      "example": "so"
    },
    {
      "exercise": "",
      "example": "socket"
    },
    {
      "exercise": "",
      "example": "some"
    },
    {
      "exercise": "",
      "example": "sort"
    },
    {
      "exercise": "",
      "example": "source"
    },
    {
      "exercise": "",
      "example": "space"
    },
    {
      "exercise": "",
      "example": "spec"
    },
    {
      "exercise": "",
      "example": "special"
    },
    {
      "exercise": "",
      "example": "speed"
    },
    {
      "exercise": "",
      "example": "src"
    },
    {
      "exercise": "",
      "example": "stack"
    },
    {
      "exercise": "",
      "example": "standard"
    },
    {
      "exercise": "",
      "example": "start"
    },
    {
      "exercise": "",
      "example": "state"
    },
    {
      "exercise": "",
      "example": "status"
    },
    {
      "exercise": "",
      "example": "step"
    },
    {
      "exercise": "",
      "example": "stl"
    },
    {
      "exercise": "",
      "example": "stop"
    },
    {
      "exercise": "",
      "example": "store"
    },
    {
      "exercise": "",
      "example": "str"
    },
    {
      "exercise": "",
      "example": "stream"
    },
    {
      "exercise": "",
      "example": "streams"
    },
    {
      "exercise": "",
      "example": "string"
    },
    {
      "exercise": "",
      "example": "stringp"
    },
    {
      "exercise": "",
      "example": "strings"
    },
    {
      "exercise": "",
      "example": "struct"
    },
    {
      "exercise": "",
      "example": "style"
    },
    {
      "exercise": "",
      "example": "sub"
    },
    {
      "exercise": "",
      "example": "subject"
    },
    {
      "exercise": "",
      "example": "subseq"
    },
    {
      "exercise": "",
      "example": "substrate"
    },
    {
      "exercise": "",
      "example": "sum"
    },
    {
      "exercise": "",
      "example": "supersede"
    },
    {
      "exercise": "",
      "example": "support"
    },
    {
      "exercise": "",
      "example": "swank"
    },
    {
      "exercise": "",
      "example": "sym"
    },
    {
      "exercise": "",
      "example": "symbol"
    },
    {
      "exercise": "",
      "example": "symbolp"
    },
    {
      "exercise": "",
      "example": "symbols"
    },
    {
      "exercise": "",
      "example": "syntax"
    },
    {
      "exercise": "",
      "example": "sys"
    },
    {
      "exercise": "",
      "example": "system"
    },
    {
      "exercise": "",
      "example": "t"
    },
    {
      "exercise": "",
      "example": "table"
    },
    {
      "exercise": "",
      "example": "tabs"
    },
    {
      "exercise": "",
      "example": "tag"
    },
    {
      "exercise": "",
      "example": "tagbody"
    },
    {
      "exercise": "",
      "example": "tail"
    },
    {
      "exercise": "",
      "example": "target"
    },
    {
      "exercise": "",
      "example": "tbox"
    },
    {
      "exercise": "",
      "example": "temp"
    },
    {
      "exercise": "",
      "example": "template"
    },
    {
      "exercise": "",
      "example": "term"
    },
    {
      "exercise": "",
      "example": "terpri"
    },
    {
      "exercise": "",
      "example": "test"
    },
    {
      "exercise": "",
      "example": "tests"
    },
    {
      "exercise": "",
      "example": "text"
    },
    {
      "exercise": "",
      "example": "textual"
    },
    {
      "exercise": "",
      "example": "texture"
    },
    {
      "exercise": "",
      "example": "that"
    },
    {
      "exercise": "",
      "example": "the"
    },
    {
      "exercise": "",
      "example": "thematic"
    },
    {
      "exercise": "",
      "example": "then"
    },
    {
      "exercise": "",
      "example": "thing"
    },
    {
      "exercise": "",
      "example": "this"
    },
    {
      "exercise": "",
      "example": "thread"
    },
    {
      "exercise": "",
      "example": "threads"
    },
    {
      "exercise": "",
      "example": "time"
    },
    {
      "exercise": "",
      "example": "timeout"
    },
    {
      "exercise": "",
      "example": "title"
    },
    {
      "exercise": "",
      "example": "tmp"
    },
    {
      "exercise": "",
      "example": "to"
    },
    {
      "exercise": "",
      "example": "token"
    },
    {
      "exercise": "",
      "example": "top"
    },
    {
      "exercise": "",
      "example": "toplevel"
    },
    {
      "exercise": "",
      "example": "trace"
    },
    {
      "exercise": "",
      "example": "transform"
    },
    {
      "exercise": "",
      "example": "translations"
    },
    {
      "exercise": "",
      "example": "tree"
    },
    {
      "exercise": "",
      "example": "true"
    },
    {
      "exercise": "",
      "example": "truename"
    },
    {
      "exercise": "",
      "example": "tv"
    },
    {
      "exercise": "",
      "example": "two"
    },
    {
      "exercise": "",
      "example": "tymoon"
    },
    {
      "exercise": "",
      "example": "type"
    },
    {
      "exercise": "",
      "example": "typecase"
    },
    {
      "exercise": "",
      "example": "typep"
    },
    {
      "exercise": "",
      "example": "types"
    },
    {
      "exercise": "",
      "example": "u"
    },
    {
      "exercise": "",
      "example": "uint"
    },
    {
      "exercise": "",
      "example": "uiop"
    },
    {
      "exercise": "",
      "example": "unit"
    },
    {
      "exercise": "",
      "example": "unix"
    },
    {
      "exercise": "",
      "example": "unless"
    },
    {
      "exercise": "",
      "example": "unreadable"
    },
    {
      "exercise": "",
      "example": "unsigned"
    },
    {
      "exercise": "",
      "example": "until"
    },
    {
      "exercise": "",
      "example": "unwind"
    },
    {
      "exercise": "",
      "example": "up"
    },
    {
      "exercise": "",
      "example": "update"
    },
    {
      "exercise": "",
      "example": "upgradability"
    },
    {
      "exercise": "",
      "example": "url"
    },
    {
      "exercise": "",
      "example": "use"
    },
    {
      "exercise": "",
      "example": "used"
    },
    {
      "exercise": "",
      "example": "user"
    },
    {
      "exercise": "",
      "example": "using"
    },
    {
      "exercise": "",
      "example": "usocket"
    },
    {
      "exercise": "",
      "example": "utf"
    },
    {
      "exercise": "",
      "example": "v"
    },
    {
      "exercise": "",
      "example": "val"
    },
    {
      "exercise": "",
      "example": "value"
    },
    {
      "exercise": "",
      "example": "values"
    },
    {
      "exercise": "",
      "example": "var"
    },
    {
      "exercise": "",
      "example": "variable"
    },
    {
      "exercise": "",
      "example": "variables"
    },
    {
      "exercise": "",
      "example": "vars"
    },
    {
      "exercise": "",
      "example": "vec"
    },
    {
      "exercise": "",
      "example": "vector"
    },
    {
      "exercise": "",
      "example": "verbose"
    },
    {
      "exercise": "",
      "example": "version"
    },
    {
      "exercise": "",
      "example": "view"
    },
    {
      "exercise": "",
      "example": "vm"
    },
    {
      "exercise": "",
      "example": "void"
    },
    {
      "exercise": "",
      "example": "w"
    },
    {
      "exercise": "",
      "example": "wait"
    },
    {
      "exercise": "",
      "example": "warn"
    },
    {
      "exercise": "",
      "example": "warning"
    },
    {
      "exercise": "",
      "example": "warnings"
    },
    {
      "exercise": "",
      "example": "was"
    },
    {
      "exercise": "",
      "example": "we"
    },
    {
      "exercise": "",
      "example": "website"
    },
    {
      "exercise": "",
      "example": "west"
    },
    {
      "exercise": "",
      "example": "when"
    },
    {
      "exercise": "",
      "example": "where"
    },
    {
      "exercise": "",
      "example": "which"
    },
    {
      "exercise": "",
      "example": "while"
    },
    {
      "exercise": "",
      "example": "who"
    },
    {
      "exercise": "",
      "example": "width"
    },
    {
      "exercise": "",
      "example": "will"
    },
    {
      "exercise": "",
      "example": "win"
    },
    {
      "exercise": "",
      "example": "win32"
    },
    {
      "exercise": "",
      "example": "window"
    },
    {
      "exercise": "",
      "example": "windows"
    },
    {
      "exercise": "",
      "example": "with"
    },
    {
      "exercise": "",
      "example": "without"
    },
    {
      "exercise": "",
      "example": "word"
    },
    {
      "exercise": "",
      "example": "work"
    },
    {
      "exercise": "",
      "example": "write"
    },
    {
      "exercise": "",
      "example": "written"
    },
    {
      "exercise": "",
      "example": "x"
    },
    {
      "exercise": "",
      "example": "x1"
    },
    {
      "exercise": "",
      "example": "x86"
    },
    {
      "exercise": "",
      "example": "xlib"
    },
    {
      "exercise": "",
      "example": "xref"
    },
    {
      "exercise": "",
      "example": "xwin"
    },
    {
      "exercise": "",
      "example": "y"
    },
    {
      "exercise": "",
      "example": "you"
    },
    {
      "exercise": "",
      "example": "your"
    },
    {
      "exercise": "",
      "example": "z"
    },
    {
      "exercise": "",
      "example": "zero"
    },
    {
      "exercise": "",
      "example": "zerop"
    },
    {
      "exercise": "",
      "example": "~"
    },
    {
      "exercise": "",
      "example": "~A"
    },
    {
      "exercise": "",
      "example": "~A~"
    },
    {
      "exercise": "",
      "example": "~S"
    },
    {
      "exercise": "",
      "example": "~a"
    }
  ]
}
