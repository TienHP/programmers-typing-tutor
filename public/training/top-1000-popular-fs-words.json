{
  "id": "popular-fs-words",
  "name": "Popular fs words training",
  "mode": "fs",
  "level": "beginner",
  "logo": "images/languages/fs.png",
  "lessons": [
    {
      "exercise": "",
      "example": "0000000000000000E"
    },
    {
      "exercise": "",
      "example": "0x0"
    },
    {
      "exercise": "",
      "example": "2drop"
    },
    {
      "exercise": "",
      "example": "A"
    },
    {
      "exercise": "",
      "example": "AThis"
    },
    {
      "exercise": "",
      "example": "AbstractIL"
    },
    {
      "exercise": "",
      "example": "Add"
    },
    {
      "exercise": "",
      "example": "An"
    },
    {
      "exercise": "",
      "example": "AnonymousObject"
    },
    {
      "exercise": "",
      "example": "App"
    },
    {
      "exercise": "",
      "example": "Append"
    },
    {
      "exercise": "",
      "example": "AreEqual"
    },
    {
      "exercise": "",
      "example": "Array"
    },
    {
      "exercise": "",
      "example": "Assembly"
    },
    {
      "exercise": "",
      "example": "AssemblyVersion"
    },
    {
      "exercise": "",
      "example": "Assert"
    },
    {
      "exercise": "",
      "example": "Ast"
    },
    {
      "exercise": "",
      "example": "Async"
    },
    {
      "exercise": "",
      "example": "Attribs"
    },
    {
      "exercise": "",
      "example": "AttributeTargets"
    },
    {
      "exercise": "",
      "example": "Attributes"
    },
    {
      "exercise": "",
      "example": "AutoOpen"
    },
    {
      "exercise": "",
      "example": "Boolean"
    },
    {
      "exercise": "",
      "example": "Build"
    },
    {
      "exercise": "",
      "example": "C"
    },
    {
      "exercise": "",
      "example": "CG"
    },
    {
      "exercise": "",
      "example": "COM"
    },
    {
      "exercise": "",
      "example": "Call"
    },
    {
      "exercise": "",
      "example": "CallingConvention"
    },
    {
      "exercise": "",
      "example": "Castle"
    },
    {
      "exercise": "",
      "example": "Category"
    },
    {
      "exercise": "",
      "example": "Check"
    },
    {
      "exercise": "",
      "example": "Choice1Of2"
    },
    {
      "exercise": "",
      "example": "Choice2Of2"
    },
    {
      "exercise": "",
      "example": "Class"
    },
    {
      "exercise": "",
      "example": "Close"
    },
    {
      "exercise": "",
      "example": "Collections"
    },
    {
      "exercise": "",
      "example": "Color"
    },
    {
      "exercise": "",
      "example": "ComVisible"
    },
    {
      "exercise": "",
      "example": "Combine"
    },
    {
      "exercise": "",
      "example": "Common"
    },
    {
      "exercise": "",
      "example": "CompareTo"
    },
    {
      "exercise": "",
      "example": "CompilationRepresentation"
    },
    {
      "exercise": "",
      "example": "CompilationRepresentationFlags"
    },
    {
      "exercise": "",
      "example": "CompiledName"
    },
    {
      "exercise": "",
      "example": "Compiler"
    },
    {
      "exercise": "",
      "example": "CompilerServices"
    },
    {
      "exercise": "",
      "example": "Console"
    },
    {
      "exercise": "",
      "example": "Const"
    },
    {
      "exercise": "",
      "example": "ConstValue"
    },
    {
      "exercise": "",
      "example": "Constants"
    },
    {
      "exercise": "",
      "example": "Contains"
    },
    {
      "exercise": "",
      "example": "ContainsKey"
    },
    {
      "exercise": "",
      "example": "Control"
    },
    {
      "exercise": "",
      "example": "Core"
    },
    {
      "exercise": "",
      "example": "Count"
    },
    {
      "exercise": "",
      "example": "Create"
    },
    {
      "exercise": "",
      "example": "Current"
    },
    {
      "exercise": "",
      "example": "CustomAttrs"
    },
    {
      "exercise": "",
      "example": "DEBUG"
    },
    {
      "exercise": "",
      "example": "Data"
    },
    {
      "exercise": "",
      "example": "DateTime"
    },
    {
      "exercise": "",
      "example": "Debug"
    },
    {
      "exercise": "",
      "example": "DeclareResourceString"
    },
    {
      "exercise": "",
      "example": "DeclaringType"
    },
    {
      "exercise": "",
      "example": "Default"
    },
    {
      "exercise": "",
      "example": "DependenciesFile"
    },
    {
      "exercise": "",
      "example": "Deref"
    },
    {
      "exercise": "",
      "example": "Diagnostics"
    },
    {
      "exercise": "",
      "example": "Dictionary"
    },
    {
      "exercise": "",
      "example": "DisplayEnv"
    },
    {
      "exercise": "",
      "example": "DisplayName"
    },
    {
      "exercise": "",
      "example": "Dispose"
    },
    {
      "exercise": "",
      "example": "DllImport"
    },
    {
      "exercise": "",
      "example": "DotNetFramework"
    },
    {
      "exercise": "",
      "example": "ELSE"
    },
    {
      "exercise": "",
      "example": "EXTENSIONTYPING"
    },
    {
      "exercise": "",
      "example": "Emit"
    },
    {
      "exercise": "",
      "example": "EmitAndLog"
    },
    {
      "exercise": "",
      "example": "Empty"
    },
    {
      "exercise": "",
      "example": "EnclosingType"
    },
    {
      "exercise": "",
      "example": "EntryPoint"
    },
    {
      "exercise": "",
      "example": "Environment"
    },
    {
      "exercise": "",
      "example": "Equals"
    },
    {
      "exercise": "",
      "example": "Error"
    },
    {
      "exercise": "",
      "example": "Event"
    },
    {
      "exercise": "",
      "example": "Exception"
    },
    {
      "exercise": "",
      "example": "Exists"
    },
    {
      "exercise": "",
      "example": "ExpectedStackState"
    },
    {
      "exercise": "",
      "example": "Expr"
    },
    {
      "exercise": "",
      "example": "Extension"
    },
    {
      "exercise": "",
      "example": "Extensions"
    },
    {
      "exercise": "",
      "example": "F"
    },
    {
      "exercise": "",
      "example": "FAKE"
    },
    {
      "exercise": "",
      "example": "FSComp"
    },
    {
      "exercise": "",
      "example": "FSharp"
    },
    {
      "exercise": "",
      "example": "FSharpChoice"
    },
    {
      "exercise": "",
      "example": "FSharpFunc"
    },
    {
      "exercise": "",
      "example": "FSharpList"
    },
    {
      "exercise": "",
      "example": "FStar"
    },
    {
      "exercise": "",
      "example": "Fact"
    },
    {
      "exercise": "",
      "example": "Fail"
    },
    {
      "exercise": "",
      "example": "File"
    },
    {
      "exercise": "",
      "example": "FileName"
    },
    {
      "exercise": "",
      "example": "FlatList"
    },
    {
      "exercise": "",
      "example": "For"
    },
    {
      "exercise": "",
      "example": "Force"
    },
    {
      "exercise": "",
      "example": "Format"
    },
    {
      "exercise": "",
      "example": "Framework"
    },
    {
      "exercise": "",
      "example": "FrameworkRestriction"
    },
    {
      "exercise": "",
      "example": "FrameworkVersion"
    },
    {
      "exercise": "",
      "example": "FsUnit"
    },
    {
      "exercise": "",
      "example": "FullName"
    },
    {
      "exercise": "",
      "example": "Generate"
    },
    {
      "exercise": "",
      "example": "Generic"
    },
    {
      "exercise": "",
      "example": "Get"
    },
    {
      "exercise": "",
      "example": "GetCustomAttributes"
    },
    {
      "exercise": "",
      "example": "GetCustomAttributesData"
    },
    {
      "exercise": "",
      "example": "GetEnumerator"
    },
    {
      "exercise": "",
      "example": "GetHashCode"
    },
    {
      "exercise": "",
      "example": "GetType"
    },
    {
      "exercise": "",
      "example": "Groups"
    },
    {
      "exercise": "",
      "example": "Guid"
    },
    {
      "exercise": "",
      "example": "Http"
    },
    {
      "exercise": "",
      "example": "IDisposable"
    },
    {
      "exercise": "",
      "example": "IEnumerable"
    },
    {
      "exercise": "",
      "example": "IF"
    },
    {
      "exercise": "",
      "example": "IL"
    },
    {
      "exercise": "",
      "example": "ILAttribElem"
    },
    {
      "exercise": "",
      "example": "ILFieldInit"
    },
    {
      "exercise": "",
      "example": "ILMemberAccess"
    },
    {
      "exercise": "",
      "example": "ILScopeRef"
    },
    {
      "exercise": "",
      "example": "ILType"
    },
    {
      "exercise": "",
      "example": "ILTypeRef"
    },
    {
      "exercise": "",
      "example": "IO"
    },
    {
      "exercise": "",
      "example": "IParseState"
    },
    {
      "exercise": "",
      "example": "Id"
    },
    {
      "exercise": "",
      "example": "Ident"
    },
    {
      "exercise": "",
      "example": "If"
    },
    {
      "exercise": "",
      "example": "Ignore"
    },
    {
      "exercise": "",
      "example": "Import"
    },
    {
      "exercise": "",
      "example": "In"
    },
    {
      "exercise": "",
      "example": "Include"
    },
    {
      "exercise": "",
      "example": "Indicates"
    },
    {
      "exercise": "",
      "example": "Inline"
    },
    {
      "exercise": "",
      "example": "Instance"
    },
    {
      "exercise": "",
      "example": "Int32"
    },
    {
      "exercise": "",
      "example": "Internal"
    },
    {
      "exercise": "",
      "example": "InternalError"
    },
    {
      "exercise": "",
      "example": "InteropServices"
    },
    {
      "exercise": "",
      "example": "Invoke"
    },
    {
      "exercise": "",
      "example": "IsEmpty"
    },
    {
      "exercise": "",
      "example": "IsNone"
    },
    {
      "exercise": "",
      "example": "IsStatic"
    },
    {
      "exercise": "",
      "example": "Item"
    },
    {
      "exercise": "",
      "example": "JavaScript"
    },
    {
      "exercise": "",
      "example": "Key"
    },
    {
      "exercise": "",
      "example": "Lambda"
    },
    {
      "exercise": "",
      "example": "LanguagePrimitives"
    },
    {
      "exercise": "",
      "example": "Lazy"
    },
    {
      "exercise": "",
      "example": "Length"
    },
    {
      "exercise": "",
      "example": "Library"
    },
    {
      "exercise": "",
      "example": "Linq"
    },
    {
      "exercise": "",
      "example": "List"
    },
    {
      "exercise": "",
      "example": "Literal"
    },
    {
      "exercise": "",
      "example": "Local"
    },
    {
      "exercise": "",
      "example": "Logging"
    },
    {
      "exercise": "",
      "example": "LogicalName"
    },
    {
      "exercise": "",
      "example": "M"
    },
    {
      "exercise": "",
      "example": "MANone"
    },
    {
      "exercise": "",
      "example": "MBrace"
    },
    {
      "exercise": "",
      "example": "Make"
    },
    {
      "exercise": "",
      "example": "Map"
    },
    {
      "exercise": "",
      "example": "Match"
    },
    {
      "exercise": "",
      "example": "MemberInfo"
    },
    {
      "exercise": "",
      "example": "MemberKind"
    },
    {
      "exercise": "",
      "example": "Message"
    },
    {
      "exercise": "",
      "example": "Method"
    },
    {
      "exercise": "",
      "example": "Microsoft"
    },
    {
      "exercise": "",
      "example": "Module"
    },
    {
      "exercise": "",
      "example": "ModuleOrNamespaceType"
    },
    {
      "exercise": "",
      "example": "ModuleSuffix"
    },
    {
      "exercise": "",
      "example": "MoveNext"
    },
    {
      "exercise": "",
      "example": "NET"
    },
    {
      "exercise": "",
      "example": "NUnit"
    },
    {
      "exercise": "",
      "example": "Name"
    },
    {
      "exercise": "",
      "example": "NameMap"
    },
    {
      "exercise": "",
      "example": "Net"
    },
    {
      "exercise": "",
      "example": "NicePrint"
    },
    {
      "exercise": "",
      "example": "No"
    },
    {
      "exercise": "",
      "example": "NoComparison"
    },
    {
      "exercise": "",
      "example": "NoEquality"
    },
    {
      "exercise": "",
      "example": "None"
    },
    {
      "exercise": "",
      "example": "Note"
    },
    {
      "exercise": "",
      "example": "Now"
    },
    {
      "exercise": "",
      "example": "Nullable"
    },
    {
      "exercise": "",
      "example": "Numerics"
    },
    {
      "exercise": "",
      "example": "O"
    },
    {
      "exercise": "",
      "example": "Object"
    },
    {
      "exercise": "",
      "example": "Op"
    },
    {
      "exercise": "",
      "example": "OpCodes"
    },
    {
      "exercise": "",
      "example": "Operators"
    },
    {
      "exercise": "",
      "example": "Option"
    },
    {
      "exercise": "",
      "example": "Options"
    },
    {
      "exercise": "",
      "example": "PackageName"
    },
    {
      "exercise": "",
      "example": "Paket"
    },
    {
      "exercise": "",
      "example": "Parameters"
    },
    {
      "exercise": "",
      "example": "Parse"
    },
    {
      "exercise": "",
      "example": "Parser"
    },
    {
      "exercise": "",
      "example": "Parsing"
    },
    {
      "exercise": "",
      "example": "Path"
    },
    {
      "exercise": "",
      "example": "Patterns"
    },
    {
      "exercise": "",
      "example": "Position"
    },
    {
      "exercise": "",
      "example": "Preconditions"
    },
    {
      "exercise": "",
      "example": "Private"
    },
    {
      "exercise": "",
      "example": "Project"
    },
    {
      "exercise": "",
      "example": "Property"
    },
    {
      "exercise": "",
      "example": "ProvidedTypeDefinition"
    },
    {
      "exercise": "",
      "example": "Public"
    },
    {
      "exercise": "",
      "example": "Push"
    },
    {
      "exercise": "",
      "example": "Quotations"
    },
    {
      "exercise": "",
      "example": "REVIEW"
    },
    {
      "exercise": "",
      "example": "Range"
    },
    {
      "exercise": "",
      "example": "Read"
    },
    {
      "exercise": "",
      "example": "Reference"
    },
    {
      "exercise": "",
      "example": "Reflection"
    },
    {
      "exercise": "",
      "example": "Remove"
    },
    {
      "exercise": "",
      "example": "Replace"
    },
    {
      "exercise": "",
      "example": "Represents"
    },
    {
      "exercise": "",
      "example": "RequireQualifiedAccess"
    },
    {
      "exercise": "",
      "example": "ResizeArray"
    },
    {
      "exercise": "",
      "example": "Result"
    },
    {
      "exercise": "",
      "example": "Return"
    },
    {
      "exercise": "",
      "example": "Returns"
    },
    {
      "exercise": "",
      "example": "Revision"
    },
    {
      "exercise": "",
      "example": "RunSynchronously"
    },
    {
      "exercise": "",
      "example": "Runtime"
    },
    {
      "exercise": "",
      "example": "RuntimeHelpers"
    },
    {
      "exercise": "",
      "example": "SR"
    },
    {
      "exercise": "",
      "example": "Sealed"
    },
    {
      "exercise": "",
      "example": "Seq"
    },
    {
      "exercise": "",
      "example": "Sequential"
    },
    {
      "exercise": "",
      "example": "Set"
    },
    {
      "exercise": "",
      "example": "Single"
    },
    {
      "exercise": "",
      "example": "Some"
    },
    {
      "exercise": "",
      "example": "Stamp"
    },
    {
      "exercise": "",
      "example": "Start"
    },
    {
      "exercise": "",
      "example": "State"
    },
    {
      "exercise": "",
      "example": "String"
    },
    {
      "exercise": "",
      "example": "StringBuilder"
    },
    {
      "exercise": "",
      "example": "SymbolKind"
    },
    {
      "exercise": "",
      "example": "SynExpr"
    },
    {
      "exercise": "",
      "example": "SynMemberDefn"
    },
    {
      "exercise": "",
      "example": "SynPat"
    },
    {
      "exercise": "",
      "example": "System"
    },
    {
      "exercise": "",
      "example": "T"
    },
    {
      "exercise": "",
      "example": "T1"
    },
    {
      "exercise": "",
      "example": "T2"
    },
    {
      "exercise": "",
      "example": "T3"
    },
    {
      "exercise": "",
      "example": "T4"
    },
    {
      "exercise": "",
      "example": "T5"
    },
    {
      "exercise": "",
      "example": "T6"
    },
    {
      "exercise": "",
      "example": "T7"
    },
    {
      "exercise": "",
      "example": "THEN"
    },
    {
      "exercise": "",
      "example": "TOKEN"
    },
    {
      "exercise": "",
      "example": "TOp"
    },
    {
      "exercise": "",
      "example": "TResult"
    },
    {
      "exercise": "",
      "example": "TType"
    },
    {
      "exercise": "",
      "example": "TType_app"
    },
    {
      "exercise": "",
      "example": "Table"
    },
    {
      "exercise": "",
      "example": "TableNames"
    },
    {
      "exercise": "",
      "example": "Tags"
    },
    {
      "exercise": "",
      "example": "TcGlobals"
    },
    {
      "exercise": "",
      "example": "Test"
    },
    {
      "exercise": "",
      "example": "TestFixture"
    },
    {
      "exercise": "",
      "example": "Text"
    },
    {
      "exercise": "",
      "example": "The"
    },
    {
      "exercise": "",
      "example": "These"
    },
    {
      "exercise": "",
      "example": "This"
    },
    {
      "exercise": "",
      "example": "Threading"
    },
    {
      "exercise": "",
      "example": "Thrown"
    },
    {
      "exercise": "",
      "example": "Title"
    },
    {
      "exercise": "",
      "example": "ToString"
    },
    {
      "exercise": "",
      "example": "True"
    },
    {
      "exercise": "",
      "example": "Tuple"
    },
    {
      "exercise": "",
      "example": "Tycon"
    },
    {
      "exercise": "",
      "example": "TyconRef"
    },
    {
      "exercise": "",
      "example": "Typar"
    },
    {
      "exercise": "",
      "example": "TyparConstraint"
    },
    {
      "exercise": "",
      "example": "Typars"
    },
    {
      "exercise": "",
      "example": "Type"
    },
    {
      "exercise": "",
      "example": "Types"
    },
    {
      "exercise": "",
      "example": "U"
    },
    {
      "exercise": "",
      "example": "Unchecked"
    },
    {
      "exercise": "",
      "example": "UnionCase"
    },
    {
      "exercise": "",
      "example": "Utilities"
    },
    {
      "exercise": "",
      "example": "Utils"
    },
    {
      "exercise": "",
      "example": "Val"
    },
    {
      "exercise": "",
      "example": "ValRef"
    },
    {
      "exercise": "",
      "example": "ValReprInfo"
    },
    {
      "exercise": "",
      "example": "Value"
    },
    {
      "exercise": "",
      "example": "Var"
    },
    {
      "exercise": "",
      "example": "Version"
    },
    {
      "exercise": "",
      "example": "VisualStudio"
    },
    {
      "exercise": "",
      "example": "Void"
    },
    {
      "exercise": "",
      "example": "We"
    },
    {
      "exercise": "",
      "example": "WebSharper"
    },
    {
      "exercise": "",
      "example": "When"
    },
    {
      "exercise": "",
      "example": "Windows"
    },
    {
      "exercise": "",
      "example": "Write"
    },
    {
      "exercise": "",
      "example": "WriteLine"
    },
    {
      "exercise": "",
      "example": "X"
    },
    {
      "exercise": "",
      "example": "Xml"
    },
    {
      "exercise": "",
      "example": "XmlDoc"
    },
    {
      "exercise": "",
      "example": "Zset"
    },
    {
      "exercise": "",
      "example": "_"
    },
    {
      "exercise": "",
      "example": "__"
    },
    {
      "exercise": "",
      "example": "a"
    },
    {
      "exercise": "",
      "example": "a1"
    },
    {
      "exercise": "",
      "example": "a2"
    },
    {
      "exercise": "",
      "example": "about"
    },
    {
      "exercise": "",
      "example": "abstract"
    },
    {
      "exercise": "",
      "example": "acc"
    },
    {
      "exercise": "",
      "example": "access"
    },
    {
      "exercise": "",
      "example": "action"
    },
    {
      "exercise": "",
      "example": "actor"
    },
    {
      "exercise": "",
      "example": "actual"
    },
    {
      "exercise": "",
      "example": "ad"
    },
    {
      "exercise": "",
      "example": "add"
    },
    {
      "exercise": "",
      "example": "addr"
    },
    {
      "exercise": "",
      "example": "aenv"
    },
    {
      "exercise": "",
      "example": "after"
    },
    {
      "exercise": "",
      "example": "all"
    },
    {
      "exercise": "",
      "example": "also"
    },
    {
      "exercise": "",
      "example": "always"
    },
    {
      "exercise": "",
      "example": "amap"
    },
    {
      "exercise": "",
      "example": "an"
    },
    {
      "exercise": "",
      "example": "and"
    },
    {
      "exercise": "",
      "example": "any"
    },
    {
      "exercise": "",
      "example": "api"
    },
    {
      "exercise": "",
      "example": "are"
    },
    {
      "exercise": "",
      "example": "arg"
    },
    {
      "exercise": "",
      "example": "arg1"
    },
    {
      "exercise": "",
      "example": "args"
    },
    {
      "exercise": "",
      "example": "argtys"
    },
    {
      "exercise": "",
      "example": "argument"
    },
    {
      "exercise": "",
      "example": "arguments"
    },
    {
      "exercise": "",
      "example": "argv"
    },
    {
      "exercise": "",
      "example": "arity"
    },
    {
      "exercise": "",
      "example": "arr"
    },
    {
      "exercise": "",
      "example": "array"
    },
    {
      "exercise": "",
      "example": "as"
    },
    {
      "exercise": "",
      "example": "assembly"
    },
    {
      "exercise": "",
      "example": "assert"
    },
    {
      "exercise": "",
      "example": "associated"
    },
    {
      "exercise": "",
      "example": "async"
    },
    {
      "exercise": "",
      "example": "at"
    },
    {
      "exercise": "",
      "example": "attribs"
    },
    {
      "exercise": "",
      "example": "attribute"
    },
    {
      "exercise": "",
      "example": "attributes"
    },
    {
      "exercise": "",
      "example": "attrs"
    },
    {
      "exercise": "",
      "example": "available"
    },
    {
      "exercise": "",
      "example": "axis"
    },
    {
      "exercise": "",
      "example": "b"
    },
    {
      "exercise": "",
      "example": "b0"
    },
    {
      "exercise": "",
      "example": "b1"
    },
    {
      "exercise": "",
      "example": "b2"
    },
    {
      "exercise": "",
      "example": "base"
    },
    {
      "exercise": "",
      "example": "based"
    },
    {
      "exercise": "",
      "example": "bb"
    },
    {
      "exercise": "",
      "example": "be"
    },
    {
      "exercise": "",
      "example": "because"
    },
    {
      "exercise": "",
      "example": "been"
    },
    {
      "exercise": "",
      "example": "before"
    },
    {
      "exercise": "",
      "example": "begin"
    },
    {
      "exercise": "",
      "example": "being"
    },
    {
      "exercise": "",
      "example": "below"
    },
    {
      "exercise": "",
      "example": "bind"
    },
    {
      "exercise": "",
      "example": "binding"
    },
    {
      "exercise": "",
      "example": "bindings"
    },
    {
      "exercise": "",
      "example": "binds"
    },
    {
      "exercise": "",
      "example": "blob"
    },
    {
      "exercise": "",
      "example": "block"
    },
    {
      "exercise": "",
      "example": "body"
    },
    {
      "exercise": "",
      "example": "bool"
    },
    {
      "exercise": "",
      "example": "box"
    },
    {
      "exercise": "",
      "example": "buf"
    },
    {
      "exercise": "",
      "example": "buffer"
    },
    {
      "exercise": "",
      "example": "build"
    },
    {
      "exercise": "",
      "example": "but"
    },
    {
      "exercise": "",
      "example": "by"
    },
    {
      "exercise": "",
      "example": "byte"
    },
    {
      "exercise": "",
      "example": "bytes"
    },
    {
      "exercise": "",
      "example": "c"
    },
    {
      "exercise": "",
      "example": "cache"
    },
    {
      "exercise": "",
      "example": "call"
    },
    {
      "exercise": "",
      "example": "called"
    },
    {
      "exercise": "",
      "example": "calls"
    },
    {
      "exercise": "",
      "example": "can"
    },
    {
      "exercise": "",
      "example": "case"
    },
    {
      "exercise": "",
      "example": "cases"
    },
    {
      "exercise": "",
      "example": "category"
    },
    {
      "exercise": "",
      "example": "ccu"
    },
    {
      "exercise": "",
      "example": "cell"
    },
    {
      "exercise": "",
      "example": "cenv"
    },
    {
      "exercise": "",
      "example": "cfg"
    },
    {
      "exercise": "",
      "example": "cgbuf"
    },
    {
      "exercise": "",
      "example": "char"
    },
    {
      "exercise": "",
      "example": "chart"
    },
    {
      "exercise": "",
      "example": "check"
    },
    {
      "exercise": "",
      "example": "checkNonNull"
    },
    {
      "exercise": "",
      "example": "checker"
    },
    {
      "exercise": "",
      "example": "checking"
    },
    {
      "exercise": "",
      "example": "choose"
    },
    {
      "exercise": "",
      "example": "class"
    },
    {
      "exercise": "",
      "example": "cloc"
    },
    {
      "exercise": "",
      "example": "cmd"
    },
    {
      "exercise": "",
      "example": "code"
    },
    {
      "exercise": "",
      "example": "codebuf"
    },
    {
      "exercise": "",
      "example": "collect"
    },
    {
      "exercise": "",
      "example": "color"
    },
    {
      "exercise": "",
      "example": "com"
    },
    {
      "exercise": "",
      "example": "command"
    },
    {
      "exercise": "",
      "example": "compare"
    },
    {
      "exercise": "",
      "example": "comparer"
    },
    {
      "exercise": "",
      "example": "compgen"
    },
    {
      "exercise": "",
      "example": "compiled"
    },
    {
      "exercise": "",
      "example": "compiler"
    },
    {
      "exercise": "",
      "example": "computation"
    },
    {
      "exercise": "",
      "example": "concat"
    },
    {
      "exercise": "",
      "example": "config"
    },
    {
      "exercise": "",
      "example": "constant"
    },
    {
      "exercise": "",
      "example": "constraint"
    },
    {
      "exercise": "",
      "example": "constraints"
    },
    {
      "exercise": "",
      "example": "constructor"
    },
    {
      "exercise": "",
      "example": "cont"
    },
    {
      "exercise": "",
      "example": "contains"
    },
    {
      "exercise": "",
      "example": "content"
    },
    {
      "exercise": "",
      "example": "contents"
    },
    {
      "exercise": "",
      "example": "context"
    },
    {
      "exercise": "",
      "example": "convType"
    },
    {
      "exercise": "",
      "example": "core"
    },
    {
      "exercise": "",
      "example": "count"
    },
    {
      "exercise": "",
      "example": "cr"
    },
    {
      "exercise": "",
      "example": "create"
    },
    {
      "exercise": "",
      "example": "cref"
    },
    {
      "exercise": "",
      "example": "csenv"
    },
    {
      "exercise": "",
      "example": "ctor"
    },
    {
      "exercise": "",
      "example": "ctx"
    },
    {
      "exercise": "",
      "example": "ctxt"
    },
    {
      "exercise": "",
      "example": "curr"
    },
    {
      "exercise": "",
      "example": "current"
    },
    {
      "exercise": "",
      "example": "customAttributesImpl"
    },
    {
      "exercise": "",
      "example": "d"
    },
    {
      "exercise": "",
      "example": "data"
    },
    {
      "exercise": "",
      "example": "debug"
    },
    {
      "exercise": "",
      "example": "declaration"
    },
    {
      "exercise": "",
      "example": "declared"
    },
    {
      "exercise": "",
      "example": "default"
    },
    {
      "exercise": "",
      "example": "defaultArg"
    },
    {
      "exercise": "",
      "example": "defaultof"
    },
    {
      "exercise": "",
      "example": "defined"
    },
    {
      "exercise": "",
      "example": "definition"
    },
    {
      "exercise": "",
      "example": "definitions"
    },
    {
      "exercise": "",
      "example": "defn"
    },
    {
      "exercise": "",
      "example": "delayed"
    },
    {
      "exercise": "",
      "example": "denv"
    },
    {
      "exercise": "",
      "example": "dependencies"
    },
    {
      "exercise": "",
      "example": "dir"
    },
    {
      "exercise": "",
      "example": "dll"
    },
    {
      "exercise": "",
      "example": "do"
    },
    {
      "exercise": "",
      "example": "doc"
    },
    {
      "exercise": "",
      "example": "does"
    },
    {
      "exercise": "",
      "example": "don"
    },
    {
      "exercise": "",
      "example": "done"
    },
    {
      "exercise": "",
      "example": "drop"
    },
    {
      "exercise": "",
      "example": "dup"
    },
    {
      "exercise": "",
      "example": "e"
    },
    {
      "exercise": "",
      "example": "e1"
    },
    {
      "exercise": "",
      "example": "e2"
    },
    {
      "exercise": "",
      "example": "each"
    },
    {
      "exercise": "",
      "example": "eenv"
    },
    {
      "exercise": "",
      "example": "element"
    },
    {
      "exercise": "",
      "example": "elements"
    },
    {
      "exercise": "",
      "example": "elif"
    },
    {
      "exercise": "",
      "example": "else"
    },
    {
      "exercise": "",
      "example": "emEnv"
    },
    {
      "exercise": "",
      "example": "emit"
    },
    {
      "exercise": "",
      "example": "empty"
    },
    {
      "exercise": "",
      "example": "end"
    },
    {
      "exercise": "",
      "example": "endif"
    },
    {
      "exercise": "",
      "example": "entity"
    },
    {
      "exercise": "",
      "example": "entry"
    },
    {
      "exercise": "",
      "example": "enum"
    },
    {
      "exercise": "",
      "example": "env"
    },
    {
      "exercise": "",
      "example": "envinner"
    },
    {
      "exercise": "",
      "example": "environment"
    },
    {
      "exercise": "",
      "example": "equal"
    },
    {
      "exercise": "",
      "example": "err"
    },
    {
      "exercise": "",
      "example": "error"
    },
    {
      "exercise": "",
      "example": "errorLogger"
    },
    {
      "exercise": "",
      "example": "errorR"
    },
    {
      "exercise": "",
      "example": "errors"
    },
    {
      "exercise": "",
      "example": "es"
    },
    {
      "exercise": "",
      "example": "etc"
    },
    {
      "exercise": "",
      "example": "event"
    },
    {
      "exercise": "",
      "example": "ex"
    },
    {
      "exercise": "",
      "example": "example"
    },
    {
      "exercise": "",
      "example": "exception"
    },
    {
      "exercise": "",
      "example": "exe"
    },
    {
      "exercise": "",
      "example": "exists"
    },
    {
      "exercise": "",
      "example": "exit"
    },
    {
      "exercise": "",
      "example": "exn"
    },
    {
      "exercise": "",
      "example": "expected"
    },
    {
      "exercise": "",
      "example": "expr"
    },
    {
      "exercise": "",
      "example": "expression"
    },
    {
      "exercise": "",
      "example": "expressions"
    },
    {
      "exercise": "",
      "example": "extension"
    },
    {
      "exercise": "",
      "example": "f"
    },
    {
      "exercise": "",
      "example": "fail"
    },
    {
      "exercise": "",
      "example": "failwith"
    },
    {
      "exercise": "",
      "example": "failwithf"
    },
    {
      "exercise": "",
      "example": "false"
    },
    {
      "exercise": "",
      "example": "fi"
    },
    {
      "exercise": "",
      "example": "field"
    },
    {
      "exercise": "",
      "example": "fields"
    },
    {
      "exercise": "",
      "example": "file"
    },
    {
      "exercise": "",
      "example": "file1"
    },
    {
      "exercise": "",
      "example": "file2"
    },
    {
      "exercise": "",
      "example": "fileName"
    },
    {
      "exercise": "",
      "example": "fileName1"
    },
    {
      "exercise": "",
      "example": "filename"
    },
    {
      "exercise": "",
      "example": "files"
    },
    {
      "exercise": "",
      "example": "filter"
    },
    {
      "exercise": "",
      "example": "finally"
    },
    {
      "exercise": "",
      "example": "find"
    },
    {
      "exercise": "",
      "example": "first"
    },
    {
      "exercise": "",
      "example": "flags"
    },
    {
      "exercise": "",
      "example": "float"
    },
    {
      "exercise": "",
      "example": "fold"
    },
    {
      "exercise": "",
      "example": "foldBack"
    },
    {
      "exercise": "",
      "example": "folder"
    },
    {
      "exercise": "",
      "example": "following"
    },
    {
      "exercise": "",
      "example": "for"
    },
    {
      "exercise": "",
      "example": "forall"
    },
    {
      "exercise": "",
      "example": "force"
    },
    {
      "exercise": "",
      "example": "form"
    },
    {
      "exercise": "",
      "example": "format"
    },
    {
      "exercise": "",
      "example": "found"
    },
    {
      "exercise": "",
      "example": "framework"
    },
    {
      "exercise": "",
      "example": "free"
    },
    {
      "exercise": "",
      "example": "from"
    },
    {
      "exercise": "",
      "example": "fs"
    },
    {
      "exercise": "",
      "example": "fsi"
    },
    {
      "exercise": "",
      "example": "fspec"
    },
    {
      "exercise": "",
      "example": "fst"
    },
    {
      "exercise": "",
      "example": "fullName"
    },
    {
      "exercise": "",
      "example": "fun"
    },
    {
      "exercise": "",
      "example": "func"
    },
    {
      "exercise": "",
      "example": "function"
    },
    {
      "exercise": "",
      "example": "functions"
    },
    {
      "exercise": "",
      "example": "fvs"
    },
    {
      "exercise": "",
      "example": "g"
    },
    {
      "exercise": "",
      "example": "generate"
    },
    {
      "exercise": "",
      "example": "generated"
    },
    {
      "exercise": "",
      "example": "generic"
    },
    {
      "exercise": "",
      "example": "get"
    },
    {
      "exercise": "",
      "example": "getErrorString"
    },
    {
      "exercise": "",
      "example": "given"
    },
    {
      "exercise": "",
      "example": "group"
    },
    {
      "exercise": "",
      "example": "groupName"
    },
    {
      "exercise": "",
      "example": "h"
    },
    {
      "exercise": "",
      "example": "handler"
    },
    {
      "exercise": "",
      "example": "has"
    },
    {
      "exercise": "",
      "example": "hash"
    },
    {
      "exercise": "",
      "example": "have"
    },
    {
      "exercise": "",
      "example": "head"
    },
    {
      "exercise": "",
      "example": "here"
    },
    {
      "exercise": "",
      "example": "http"
    },
    {
      "exercise": "",
      "example": "i"
    },
    {
      "exercise": "",
      "example": "id"
    },
    {
      "exercise": "",
      "example": "idRange"
    },
    {
      "exercise": "",
      "example": "idText"
    },
    {
      "exercise": "",
      "example": "idx"
    },
    {
      "exercise": "",
      "example": "if"
    },
    {
      "exercise": "",
      "example": "ignore"
    },
    {
      "exercise": "",
      "example": "ilG"
    },
    {
      "exercise": "",
      "example": "ilg"
    },
    {
      "exercise": "",
      "example": "implementation"
    },
    {
      "exercise": "",
      "example": "implicit"
    },
    {
      "exercise": "",
      "example": "in"
    },
    {
      "exercise": "",
      "example": "include"
    },
    {
      "exercise": "",
      "example": "index"
    },
    {
      "exercise": "",
      "example": "inference"
    },
    {
      "exercise": "",
      "example": "info"
    },
    {
      "exercise": "",
      "example": "infoReader"
    },
    {
      "exercise": "",
      "example": "information"
    },
    {
      "exercise": "",
      "example": "inherit"
    },
    {
      "exercise": "",
      "example": "init"
    },
    {
      "exercise": "",
      "example": "inline"
    },
    {
      "exercise": "",
      "example": "input"
    },
    {
      "exercise": "",
      "example": "instance"
    },
    {
      "exercise": "",
      "example": "instantiation"
    },
    {
      "exercise": "",
      "example": "int"
    },
    {
      "exercise": "",
      "example": "int32"
    },
    {
      "exercise": "",
      "example": "int64"
    },
    {
      "exercise": "",
      "example": "integer"
    },
    {
      "exercise": "",
      "example": "interface"
    },
    {
      "exercise": "",
      "example": "internal"
    },
    {
      "exercise": "",
      "example": "into"
    },
    {
      "exercise": "",
      "example": "is"
    },
    {
      "exercise": "",
      "example": "isEmpty"
    },
    {
      "exercise": "",
      "example": "isNil"
    },
    {
      "exercise": "",
      "example": "isStatic"
    },
    {
      "exercise": "",
      "example": "it"
    },
    {
      "exercise": "",
      "example": "item"
    },
    {
      "exercise": "",
      "example": "items"
    },
    {
      "exercise": "",
      "example": "iter"
    },
    {
      "exercise": "",
      "example": "its"
    },
    {
      "exercise": "",
      "example": "j"
    },
    {
      "exercise": "",
      "example": "just"
    },
    {
      "exercise": "",
      "example": "k"
    },
    {
      "exercise": "",
      "example": "key"
    },
    {
      "exercise": "",
      "example": "keys"
    },
    {
      "exercise": "",
      "example": "kind"
    },
    {
      "exercise": "",
      "example": "l"
    },
    {
      "exercise": "",
      "example": "lambda"
    },
    {
      "exercise": "",
      "example": "last"
    },
    {
      "exercise": "",
      "example": "lazy"
    },
    {
      "exercise": "",
      "example": "left"
    },
    {
      "exercise": "",
      "example": "len"
    },
    {
      "exercise": "",
      "example": "length"
    },
    {
      "exercise": "",
      "example": "let"
    },
    {
      "exercise": "",
      "example": "level"
    },
    {
      "exercise": "",
      "example": "lexbuf"
    },
    {
      "exercise": "",
      "example": "lib"
    },
    {
      "exercise": "",
      "example": "lid"
    },
    {
      "exercise": "",
      "example": "line"
    },
    {
      "exercise": "",
      "example": "lines"
    },
    {
      "exercise": "",
      "example": "list"
    },
    {
      "exercise": "",
      "example": "load"
    },
    {
      "exercise": "",
      "example": "local"
    },
    {
      "exercise": "",
      "example": "location"
    },
    {
      "exercise": "",
      "example": "lock"
    },
    {
      "exercise": "",
      "example": "lockFile"
    },
    {
      "exercise": "",
      "example": "log4net"
    },
    {
      "exercise": "",
      "example": "lookup"
    },
    {
      "exercise": "",
      "example": "loop"
    },
    {
      "exercise": "",
      "example": "m"
    },
    {
      "exercise": "",
      "example": "m2"
    },
    {
      "exercise": "",
      "example": "main"
    },
    {
      "exercise": "",
      "example": "make"
    },
    {
      "exercise": "",
      "example": "map"
    },
    {
      "exercise": "",
      "example": "match"
    },
    {
      "exercise": "",
      "example": "md"
    },
    {
      "exercise": "",
      "example": "mdef"
    },
    {
      "exercise": "",
      "example": "member"
    },
    {
      "exercise": "",
      "example": "memberFlags"
    },
    {
      "exercise": "",
      "example": "members"
    },
    {
      "exercise": "",
      "example": "message"
    },
    {
      "exercise": "",
      "example": "metadata"
    },
    {
      "exercise": "",
      "example": "meth"
    },
    {
      "exercise": "",
      "example": "method"
    },
    {
      "exercise": "",
      "example": "methods"
    },
    {
      "exercise": "",
      "example": "mi"
    },
    {
      "exercise": "",
      "example": "minfo"
    },
    {
      "exercise": "",
      "example": "minst"
    },
    {
      "exercise": "",
      "example": "model"
    },
    {
      "exercise": "",
      "example": "modref"
    },
    {
      "exercise": "",
      "example": "module"
    },
    {
      "exercise": "",
      "example": "more"
    },
    {
      "exercise": "",
      "example": "mref"
    },
    {
      "exercise": "",
      "example": "ms"
    },
    {
      "exercise": "",
      "example": "msg"
    },
    {
      "exercise": "",
      "example": "mspec"
    },
    {
      "exercise": "",
      "example": "mty"
    },
    {
      "exercise": "",
      "example": "must"
    },
    {
      "exercise": "",
      "example": "mutable"
    },
    {
      "exercise": "",
      "example": "n"
    },
    {
      "exercise": "",
      "example": "name"
    },
    {
      "exercise": "",
      "example": "names"
    },
    {
      "exercise": "",
      "example": "namespace"
    },
    {
      "exercise": "",
      "example": "ncenv"
    },
    {
      "exercise": "",
      "example": "ndeep"
    },
    {
      "exercise": "",
      "example": "need"
    },
    {
      "exercise": "",
      "example": "nenv"
    },
    {
      "exercise": "",
      "example": "nested"
    },
    {
      "exercise": "",
      "example": "new"
    },
    {
      "exercise": "",
      "example": "next"
    },
    {
      "exercise": "",
      "example": "nm"
    },
    {
      "exercise": "",
      "example": "no"
    },
    {
      "exercise": "",
      "example": "node"
    },
    {
      "exercise": "",
      "example": "nodes"
    },
    {
      "exercise": "",
      "example": "non"
    },
    {
      "exercise": "",
      "example": "normalizeLineEndings"
    },
    {
      "exercise": "",
      "example": "not"
    },
    {
      "exercise": "",
      "example": "notRequired"
    },
    {
      "exercise": "",
      "example": "nowarn"
    },
    {
      "exercise": "",
      "example": "ns"
    },
    {
      "exercise": "",
      "example": "nuget"
    },
    {
      "exercise": "",
      "example": "null"
    },
    {
      "exercise": "",
      "example": "number"
    },
    {
      "exercise": "",
      "example": "numtypars"
    },
    {
      "exercise": "",
      "example": "o"
    },
    {
      "exercise": "",
      "example": "obj"
    },
    {
      "exercise": "",
      "example": "object"
    },
    {
      "exercise": "",
      "example": "of"
    },
    {
      "exercise": "",
      "example": "ofList"
    },
    {
      "exercise": "",
      "example": "ofSeq"
    },
    {
      "exercise": "",
      "example": "offset"
    },
    {
      "exercise": "",
      "example": "ok"
    },
    {
      "exercise": "",
      "example": "omit"
    },
    {
      "exercise": "",
      "example": "on"
    },
    {
      "exercise": "",
      "example": "one"
    },
    {
      "exercise": "",
      "example": "only"
    },
    {
      "exercise": "",
      "example": "op"
    },
    {
      "exercise": "",
      "example": "open"
    },
    {
      "exercise": "",
      "example": "operation"
    },
    {
      "exercise": "",
      "example": "option"
    },
    {
      "exercise": "",
      "example": "optional"
    },
    {
      "exercise": "",
      "example": "options"
    },
    {
      "exercise": "",
      "example": "opts"
    },
    {
      "exercise": "",
      "example": "or"
    },
    {
      "exercise": "",
      "example": "order"
    },
    {
      "exercise": "",
      "example": "org"
    },
    {
      "exercise": "",
      "example": "os"
    },
    {
      "exercise": "",
      "example": "other"
    },
    {
      "exercise": "",
      "example": "out"
    },
    {
      "exercise": "",
      "example": "output"
    },
    {
      "exercise": "",
      "example": "over"
    },
    {
      "exercise": "",
      "example": "overallTy"
    },
    {
      "exercise": "",
      "example": "override"
    },
    {
      "exercise": "",
      "example": "p"
    },
    {
      "exercise": "",
      "example": "p_byte"
    },
    {
      "exercise": "",
      "example": "package"
    },
    {
      "exercise": "",
      "example": "packageName"
    },
    {
      "exercise": "",
      "example": "packages"
    },
    {
      "exercise": "",
      "example": "paket"
    },
    {
      "exercise": "",
      "example": "param"
    },
    {
      "exercise": "",
      "example": "parameter"
    },
    {
      "exercise": "",
      "example": "parameters"
    },
    {
      "exercise": "",
      "example": "parent"
    },
    {
      "exercise": "",
      "example": "parse"
    },
    {
      "exercise": "",
      "example": "parseState"
    },
    {
      "exercise": "",
      "example": "parser"
    },
    {
      "exercise": "",
      "example": "part"
    },
    {
      "exercise": "",
      "example": "pat"
    },
    {
      "exercise": "",
      "example": "path"
    },
    {
      "exercise": "",
      "example": "pattern"
    },
    {
      "exercise": "",
      "example": "pinfo"
    },
    {
      "exercise": "",
      "example": "point"
    },
    {
      "exercise": "",
      "example": "pop"
    },
    {
      "exercise": "",
      "example": "pos"
    },
    {
      "exercise": "",
      "example": "position"
    },
    {
      "exercise": "",
      "example": "pr"
    },
    {
      "exercise": "",
      "example": "predicate"
    },
    {
      "exercise": "",
      "example": "prefix"
    },
    {
      "exercise": "",
      "example": "print"
    },
    {
      "exercise": "",
      "example": "printfn"
    },
    {
      "exercise": "",
      "example": "private"
    },
    {
      "exercise": "",
      "example": "process"
    },
    {
      "exercise": "",
      "example": "project"
    },
    {
      "exercise": "",
      "example": "prop"
    },
    {
      "exercise": "",
      "example": "properties"
    },
    {
      "exercise": "",
      "example": "property"
    },
    {
      "exercise": "",
      "example": "provided"
    },
    {
      "exercise": "",
      "example": "provider"
    },
    {
      "exercise": "",
      "example": "ps"
    },
    {
      "exercise": "",
      "example": "ptd"
    },
    {
      "exercise": "",
      "example": "public"
    },
    {
      "exercise": "",
      "example": "q"
    },
    {
      "exercise": "",
      "example": "query"
    },
    {
      "exercise": "",
      "example": "queue"
    },
    {
      "exercise": "",
      "example": "r"
    },
    {
      "exercise": "",
      "example": "raise"
    },
    {
      "exercise": "",
      "example": "range"
    },
    {
      "exercise": "",
      "example": "re"
    },
    {
      "exercise": "",
      "example": "read"
    },
    {
      "exercise": "",
      "example": "reader"
    },
    {
      "exercise": "",
      "example": "rec"
    },
    {
      "exercise": "",
      "example": "record"
    },
    {
      "exercise": "",
      "example": "recursive"
    },
    {
      "exercise": "",
      "example": "ref"
    },
    {
      "exercise": "",
      "example": "reference"
    },
    {
      "exercise": "",
      "example": "references"
    },
    {
      "exercise": "",
      "example": "remarks"
    },
    {
      "exercise": "",
      "example": "res"
    },
    {
      "exercise": "",
      "example": "resolution"
    },
    {
      "exercise": "",
      "example": "resolved"
    },
    {
      "exercise": "",
      "example": "resource"
    },
    {
      "exercise": "",
      "example": "rest"
    },
    {
      "exercise": "",
      "example": "result"
    },
    {
      "exercise": "",
      "example": "results"
    },
    {
      "exercise": "",
      "example": "return"
    },
    {
      "exercise": "",
      "example": "returns"
    },
    {
      "exercise": "",
      "example": "rev"
    },
    {
      "exercise": "",
      "example": "rfref"
    },
    {
      "exercise": "",
      "example": "right"
    },
    {
      "exercise": "",
      "example": "root"
    },
    {
      "exercise": "",
      "example": "rty"
    },
    {
      "exercise": "",
      "example": "run"
    },
    {
      "exercise": "",
      "example": "s"
    },
    {
      "exercise": "",
      "example": "s1"
    },
    {
      "exercise": "",
      "example": "s2"
    },
    {
      "exercise": "",
      "example": "same"
    },
    {
      "exercise": "",
      "example": "sb"
    },
    {
      "exercise": "",
      "example": "scope"
    },
    {
      "exercise": "",
      "example": "scopem"
    },
    {
      "exercise": "",
      "example": "scoref"
    },
    {
      "exercise": "",
      "example": "second"
    },
    {
      "exercise": "",
      "example": "see"
    },
    {
      "exercise": "",
      "example": "self"
    },
    {
      "exercise": "",
      "example": "seq"
    },
    {
      "exercise": "",
      "example": "sequel"
    },
    {
      "exercise": "",
      "example": "sequence"
    },
    {
      "exercise": "",
      "example": "series"
    },
    {
      "exercise": "",
      "example": "set"
    },
    {
      "exercise": "",
      "example": "should"
    },
    {
      "exercise": "",
      "example": "shouldEqual"
    },
    {
      "exercise": "",
      "example": "signature"
    },
    {
      "exercise": "",
      "example": "sigptr"
    },
    {
      "exercise": "",
      "example": "since"
    },
    {
      "exercise": "",
      "example": "single"
    },
    {
      "exercise": "",
      "example": "size"
    },
    {
      "exercise": "",
      "example": "slot"
    },
    {
      "exercise": "",
      "example": "snd"
    },
    {
      "exercise": "",
      "example": "so"
    },
    {
      "exercise": "",
      "example": "some"
    },
    {
      "exercise": "",
      "example": "source"
    },
    {
      "exercise": "",
      "example": "sp"
    },
    {
      "exercise": "",
      "example": "specified"
    },
    {
      "exercise": "",
      "example": "sprintf"
    },
    {
      "exercise": "",
      "example": "src"
    },
    {
      "exercise": "",
      "example": "st"
    },
    {
      "exercise": "",
      "example": "stack"
    },
    {
      "exercise": "",
      "example": "start"
    },
    {
      "exercise": "",
      "example": "state"
    },
    {
      "exercise": "",
      "example": "static"
    },
    {
      "exercise": "",
      "example": "str"
    },
    {
      "exercise": "",
      "example": "stream"
    },
    {
      "exercise": "",
      "example": "string"
    },
    {
      "exercise": "",
      "example": "struct"
    },
    {
      "exercise": "",
      "example": "summary"
    },
    {
      "exercise": "",
      "example": "sw"
    },
    {
      "exercise": "",
      "example": "swap"
    },
    {
      "exercise": "",
      "example": "symbol"
    },
    {
      "exercise": "",
      "example": "synExpr"
    },
    {
      "exercise": "",
      "example": "syntax"
    },
    {
      "exercise": "",
      "example": "t"
    },
    {
      "exercise": "",
      "example": "t1"
    },
    {
      "exercise": "",
      "example": "t2"
    },
    {
      "exercise": "",
      "example": "tab"
    },
    {
      "exercise": "",
      "example": "table"
    },
    {
      "exercise": "",
      "example": "tag"
    },
    {
      "exercise": "",
      "example": "tail"
    },
    {
      "exercise": "",
      "example": "target"
    },
    {
      "exercise": "",
      "example": "targets"
    },
    {
      "exercise": "",
      "example": "tau"
    },
    {
      "exercise": "",
      "example": "tc"
    },
    {
      "exercise": "",
      "example": "tcConfig"
    },
    {
      "exercise": "",
      "example": "tcConfigB"
    },
    {
      "exercise": "",
      "example": "tcGlobals"
    },
    {
      "exercise": "",
      "example": "tcImports"
    },
    {
      "exercise": "",
      "example": "tcref"
    },
    {
      "exercise": "",
      "example": "td"
    },
    {
      "exercise": "",
      "example": "tdef"
    },
    {
      "exercise": "",
      "example": "test"
    },
    {
      "exercise": "",
      "example": "text"
    },
    {
      "exercise": "",
      "example": "than"
    },
    {
      "exercise": "",
      "example": "that"
    },
    {
      "exercise": "",
      "example": "the"
    },
    {
      "exercise": "",
      "example": "them"
    },
    {
      "exercise": "",
      "example": "then"
    },
    {
      "exercise": "",
      "example": "there"
    },
    {
      "exercise": "",
      "example": "these"
    },
    {
      "exercise": "",
      "example": "they"
    },
    {
      "exercise": "",
      "example": "this"
    },
    {
      "exercise": "",
      "example": "through"
    },
    {
      "exercise": "",
      "example": "time"
    },
    {
      "exercise": "",
      "example": "tinst"
    },
    {
      "exercise": "",
      "example": "title"
    },
    {
      "exercise": "",
      "example": "tmenv"
    },
    {
      "exercise": "",
      "example": "to"
    },
    {
      "exercise": "",
      "example": "toArray"
    },
    {
      "exercise": "",
      "example": "toList"
    },
    {
      "exercise": "",
      "example": "tok"
    },
    {
      "exercise": "",
      "example": "token"
    },
    {
      "exercise": "",
      "example": "tokenTup"
    },
    {
      "exercise": "",
      "example": "top"
    },
    {
      "exercise": "",
      "example": "tp"
    },
    {
      "exercise": "",
      "example": "tpenv"
    },
    {
      "exercise": "",
      "example": "tps"
    },
    {
      "exercise": "",
      "example": "trace"
    },
    {
      "exercise": "",
      "example": "trans"
    },
    {
      "exercise": "",
      "example": "tree"
    },
    {
      "exercise": "",
      "example": "tref"
    },
    {
      "exercise": "",
      "example": "true"
    },
    {
      "exercise": "",
      "example": "try"
    },
    {
      "exercise": "",
      "example": "tryFind"
    },
    {
      "exercise": "",
      "example": "tspec"
    },
    {
      "exercise": "",
      "example": "tuple"
    },
    {
      "exercise": "",
      "example": "two"
    },
    {
      "exercise": "",
      "example": "ty"
    },
    {
      "exercise": "",
      "example": "ty1"
    },
    {
      "exercise": "",
      "example": "ty2"
    },
    {
      "exercise": "",
      "example": "tyOfExpr"
    },
    {
      "exercise": "",
      "example": "tyT"
    },
    {
      "exercise": "",
      "example": "tyargs"
    },
    {
      "exercise": "",
      "example": "tycon"
    },
    {
      "exercise": "",
      "example": "tycons"
    },
    {
      "exercise": "",
      "example": "tyenv"
    },
    {
      "exercise": "",
      "example": "typ"
    },
    {
      "exercise": "",
      "example": "typars"
    },
    {
      "exercise": "",
      "example": "type"
    },
    {
      "exercise": "",
      "example": "typeEquiv"
    },
    {
      "exercise": "",
      "example": "typeof"
    },
    {
      "exercise": "",
      "example": "types"
    },
    {
      "exercise": "",
      "example": "tys"
    },
    {
      "exercise": "",
      "example": "u"
    },
    {
      "exercise": "",
      "example": "ucref"
    },
    {
      "exercise": "",
      "example": "uint16"
    },
    {
      "exercise": "",
      "example": "uint32"
    },
    {
      "exercise": "",
      "example": "unbox"
    },
    {
      "exercise": "",
      "example": "uniform"
    },
    {
      "exercise": "",
      "example": "union"
    },
    {
      "exercise": "",
      "example": "unit"
    },
    {
      "exercise": "",
      "example": "up"
    },
    {
      "exercise": "",
      "example": "upcast"
    },
    {
      "exercise": "",
      "example": "url"
    },
    {
      "exercise": "",
      "example": "use"
    },
    {
      "exercise": "",
      "example": "used"
    },
    {
      "exercise": "",
      "example": "using"
    },
    {
      "exercise": "",
      "example": "v"
    },
    {
      "exercise": "",
      "example": "v1"
    },
    {
      "exercise": "",
      "example": "v2"
    },
    {
      "exercise": "",
      "example": "val"
    },
    {
      "exercise": "",
      "example": "value"
    },
    {
      "exercise": "",
      "example": "values"
    },
    {
      "exercise": "",
      "example": "variable"
    },
    {
      "exercise": "",
      "example": "variables"
    },
    {
      "exercise": "",
      "example": "ve"
    },
    {
      "exercise": "",
      "example": "vec3"
    },
    {
      "exercise": "",
      "example": "vec4"
    },
    {
      "exercise": "",
      "example": "vector"
    },
    {
      "exercise": "",
      "example": "version"
    },
    {
      "exercise": "",
      "example": "view"
    },
    {
      "exercise": "",
      "example": "void"
    },
    {
      "exercise": "",
      "example": "vref"
    },
    {
      "exercise": "",
      "example": "vs"
    },
    {
      "exercise": "",
      "example": "vspec"
    },
    {
      "exercise": "",
      "example": "w"
    },
    {
      "exercise": "",
      "example": "walkExpr"
    },
    {
      "exercise": "",
      "example": "warning"
    },
    {
      "exercise": "",
      "example": "was"
    },
    {
      "exercise": "",
      "example": "we"
    },
    {
      "exercise": "",
      "example": "when"
    },
    {
      "exercise": "",
      "example": "where"
    },
    {
      "exercise": "",
      "example": "which"
    },
    {
      "exercise": "",
      "example": "while"
    },
    {
      "exercise": "",
      "example": "wholeProjectResults"
    },
    {
      "exercise": "",
      "example": "will"
    },
    {
      "exercise": "",
      "example": "with"
    },
    {
      "exercise": "",
      "example": "wordL"
    },
    {
      "exercise": "",
      "example": "writer"
    },
    {
      "exercise": "",
      "example": "www"
    },
    {
      "exercise": "",
      "example": "x"
    },
    {
      "exercise": "",
      "example": "x1"
    },
    {
      "exercise": "",
      "example": "x2"
    },
    {
      "exercise": "",
      "example": "xml"
    },
    {
      "exercise": "",
      "example": "xmlDoc"
    },
    {
      "exercise": "",
      "example": "xs"
    },
    {
      "exercise": "",
      "example": "y"
    },
    {
      "exercise": "",
      "example": "yield"
    },
    {
      "exercise": "",
      "example": "you"
    },
    {
      "exercise": "",
      "example": "z"
    },
    {
      "exercise": "",
      "example": "~"
    },
    {
      "exercise": "",
      "example": "﻿"
    },
    {
      "exercise": "",
      "example": "﻿namespace"
    }
  ]
}
