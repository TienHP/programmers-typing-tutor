{
  "id": "popular-hs-words",
  "name": "Popular hs words training",
  "mode": "hs",
  "level": "beginner",
  "logo": "images/languages/hs.png",
  "lessons": [
    {
      "exercise": "",
      "example": "A"
    },
    {
      "exercise": "",
      "example": "AWS"
    },
    {
      "exercise": "",
      "example": "Abs"
    },
    {
      "exercise": "",
      "example": "Aeson"
    },
    {
      "exercise": "",
      "example": "All"
    },
    {
      "exercise": "",
      "example": "An"
    },
    {
      "exercise": "",
      "example": "ApiAnnotation"
    },
    {
      "exercise": "",
      "example": "App"
    },
    {
      "exercise": "",
      "example": "Applicative"
    },
    {
      "exercise": "",
      "example": "Array"
    },
    {
      "exercise": "",
      "example": "Arrow"
    },
    {
      "exercise": "",
      "example": "Autolib"
    },
    {
      "exercise": "",
      "example": "B"
    },
    {
      "exercise": "",
      "example": "BS"
    },
    {
      "exercise": "",
      "example": "BangPatterns"
    },
    {
      "exercise": "",
      "example": "Base"
    },
    {
      "exercise": "",
      "example": "Bin"
    },
    {
      "exercise": "",
      "example": "Binary"
    },
    {
      "exercise": "",
      "example": "Bind"
    },
    {
      "exercise": "",
      "example": "Bits"
    },
    {
      "exercise": "",
      "example": "Bool"
    },
    {
      "exercise": "",
      "example": "Brendan"
    },
    {
      "exercise": "",
      "example": "Builder"
    },
    {
      "exercise": "",
      "example": "But"
    },
    {
      "exercise": "",
      "example": "ByteString"
    },
    {
      "exercise": "",
      "example": "C"
    },
    {
      "exercise": "",
      "example": "CInt"
    },
    {
      "exercise": "",
      "example": "CPP"
    },
    {
      "exercise": "",
      "example": "Cabal"
    },
    {
      "exercise": "",
      "example": "Char"
    },
    {
      "exercise": "",
      "example": "Char8"
    },
    {
      "exercise": "",
      "example": "Check"
    },
    {
      "exercise": "",
      "example": "Class"
    },
    {
      "exercise": "",
      "example": "Client"
    },
    {
      "exercise": "",
      "example": "CmmExpr"
    },
    {
      "exercise": "",
      "example": "Coercion"
    },
    {
      "exercise": "",
      "example": "Common"
    },
    {
      "exercise": "",
      "example": "Concurrent"
    },
    {
      "exercise": "",
      "example": "Conduit"
    },
    {
      "exercise": "",
      "example": "Config"
    },
    {
      "exercise": "",
      "example": "Control"
    },
    {
      "exercise": "",
      "example": "Core"
    },
    {
      "exercise": "",
      "example": "CoreExpr"
    },
    {
      "exercise": "",
      "example": "Creating"
    },
    {
      "exercise": "",
      "example": "Ct"
    },
    {
      "exercise": "",
      "example": "D"
    },
    {
      "exercise": "",
      "example": "DOM"
    },
    {
      "exercise": "",
      "example": "Data"
    },
    {
      "exercise": "",
      "example": "DataCon"
    },
    {
      "exercise": "",
      "example": "DataKinds"
    },
    {
      "exercise": "",
      "example": "Database"
    },
    {
      "exercise": "",
      "example": "Debug"
    },
    {
      "exercise": "",
      "example": "Default"
    },
    {
      "exercise": "",
      "example": "DeriveDataTypeable"
    },
    {
      "exercise": "",
      "example": "DeriveGeneric"
    },
    {
      "exercise": "",
      "example": "Directory"
    },
    {
      "exercise": "",
      "example": "Distribution"
    },
    {
      "exercise": "",
      "example": "Doc"
    },
    {
      "exercise": "",
      "example": "Double"
    },
    {
      "exercise": "",
      "example": "DsM"
    },
    {
      "exercise": "",
      "example": "DynFlags"
    },
    {
      "exercise": "",
      "example": "E"
    },
    {
      "exercise": "",
      "example": "Either"
    },
    {
      "exercise": "",
      "example": "Empty"
    },
    {
      "exercise": "",
      "example": "Encoding"
    },
    {
      "exercise": "",
      "example": "Enum"
    },
    {
      "exercise": "",
      "example": "Environment"
    },
    {
      "exercise": "",
      "example": "Eq"
    },
    {
      "exercise": "",
      "example": "Error"
    },
    {
      "exercise": "",
      "example": "Example"
    },
    {
      "exercise": "",
      "example": "Exception"
    },
    {
      "exercise": "",
      "example": "Exit"
    },
    {
      "exercise": "",
      "example": "Exp"
    },
    {
      "exercise": "",
      "example": "Expr"
    },
    {
      "exercise": "",
      "example": "F"
    },
    {
      "exercise": "",
      "example": "False"
    },
    {
      "exercise": "",
      "example": "FastString"
    },
    {
      "exercise": "",
      "example": "Field"
    },
    {
      "exercise": "",
      "example": "FilePath"
    },
    {
      "exercise": "",
      "example": "Flag"
    },
    {
      "exercise": "",
      "example": "FlexibleContexts"
    },
    {
      "exercise": "",
      "example": "FlexibleInstances"
    },
    {
      "exercise": "",
      "example": "Float"
    },
    {
      "exercise": "",
      "example": "Foldable"
    },
    {
      "exercise": "",
      "example": "Foo"
    },
    {
      "exercise": "",
      "example": "For"
    },
    {
      "exercise": "",
      "example": "Foreign"
    },
    {
      "exercise": "",
      "example": "Framework"
    },
    {
      "exercise": "",
      "example": "FromJSON"
    },
    {
      "exercise": "",
      "example": "Function"
    },
    {
      "exercise": "",
      "example": "Functor"
    },
    {
      "exercise": "",
      "example": "G"
    },
    {
      "exercise": "",
      "example": "GADTs"
    },
    {
      "exercise": "",
      "example": "GHC"
    },
    {
      "exercise": "",
      "example": "GHCJS"
    },
    {
      "exercise": "",
      "example": "GHCi"
    },
    {
      "exercise": "",
      "example": "GL"
    },
    {
      "exercise": "",
      "example": "Ganeti"
    },
    {
      "exercise": "",
      "example": "GeneralizedNewtypeDeriving"
    },
    {
      "exercise": "",
      "example": "Generic"
    },
    {
      "exercise": "",
      "example": "Generics"
    },
    {
      "exercise": "",
      "example": "Get"
    },
    {
      "exercise": "",
      "example": "Graphics"
    },
    {
      "exercise": "",
      "example": "H"
    },
    {
      "exercise": "",
      "example": "HTTP"
    },
    {
      "exercise": "",
      "example": "HUnit"
    },
    {
      "exercise": "",
      "example": "Handle"
    },
    {
      "exercise": "",
      "example": "Handler"
    },
    {
      "exercise": "",
      "example": "HappyStk"
    },
    {
      "exercise": "",
      "example": "HashMap"
    },
    {
      "exercise": "",
      "example": "Haskell"
    },
    {
      "exercise": "",
      "example": "Hay"
    },
    {
      "exercise": "",
      "example": "Header"
    },
    {
      "exercise": "",
      "example": "Here"
    },
    {
      "exercise": "",
      "example": "Hspec"
    },
    {
      "exercise": "",
      "example": "I"
    },
    {
      "exercise": "",
      "example": "INLINE"
    },
    {
      "exercise": "",
      "example": "IO"
    },
    {
      "exercise": "",
      "example": "IORef"
    },
    {
      "exercise": "",
      "example": "Id"
    },
    {
      "exercise": "",
      "example": "Identity"
    },
    {
      "exercise": "",
      "example": "Idris"
    },
    {
      "exercise": "",
      "example": "If"
    },
    {
      "exercise": "",
      "example": "In"
    },
    {
      "exercise": "",
      "example": "Instance"
    },
    {
      "exercise": "",
      "example": "Int"
    },
    {
      "exercise": "",
      "example": "Int64"
    },
    {
      "exercise": "",
      "example": "IntMap"
    },
    {
      "exercise": "",
      "example": "Integer"
    },
    {
      "exercise": "",
      "example": "Internal"
    },
    {
      "exercise": "",
      "example": "It"
    },
    {
      "exercise": "",
      "example": "JSON"
    },
    {
      "exercise": "",
      "example": "Just"
    },
    {
      "exercise": "",
      "example": "Kind"
    },
    {
      "exercise": "",
      "example": "L"
    },
    {
      "exercise": "",
      "example": "LANGUAGE"
    },
    {
      "exercise": "",
      "example": "LHsExpr"
    },
    {
      "exercise": "",
      "example": "LT"
    },
    {
      "exercise": "",
      "example": "LambdaCase"
    },
    {
      "exercise": "",
      "example": "LangExt"
    },
    {
      "exercise": "",
      "example": "Language"
    },
    {
      "exercise": "",
      "example": "Lazy"
    },
    {
      "exercise": "",
      "example": "Left"
    },
    {
      "exercise": "",
      "example": "Lens"
    },
    {
      "exercise": "",
      "example": "Lenses"
    },
    {
      "exercise": "",
      "example": "LispVal"
    },
    {
      "exercise": "",
      "example": "List"
    },
    {
      "exercise": "",
      "example": "Located"
    },
    {
      "exercise": "",
      "example": "M"
    },
    {
      "exercise": "",
      "example": "Main"
    },
    {
      "exercise": "",
      "example": "Maintainer"
    },
    {
      "exercise": "",
      "example": "Map"
    },
    {
      "exercise": "",
      "example": "Marshal"
    },
    {
      "exercise": "",
      "example": "Maybe"
    },
    {
      "exercise": "",
      "example": "MkC"
    },
    {
      "exercise": "",
      "example": "Module"
    },
    {
      "exercise": "",
      "example": "ModuleName"
    },
    {
      "exercise": "",
      "example": "Monad"
    },
    {
      "exercise": "",
      "example": "MonadIO"
    },
    {
      "exercise": "",
      "example": "Monoid"
    },
    {
      "exercise": "",
      "example": "MultiParamTypeClasses"
    },
    {
      "exercise": "",
      "example": "NB"
    },
    {
      "exercise": "",
      "example": "NOINLINE"
    },
    {
      "exercise": "",
      "example": "Name"
    },
    {
      "exercise": "",
      "example": "Network"
    },
    {
      "exercise": "",
      "example": "Nil"
    },
    {
      "exercise": "",
      "example": "No"
    },
    {
      "exercise": "",
      "example": "NoArg"
    },
    {
      "exercise": "",
      "example": "NoImplicitPrelude"
    },
    {
      "exercise": "",
      "example": "Node"
    },
    {
      "exercise": "",
      "example": "Note"
    },
    {
      "exercise": "",
      "example": "Nothing"
    },
    {
      "exercise": "",
      "example": "Num"
    },
    {
      "exercise": "",
      "example": "O"
    },
    {
      "exercise": "",
      "example": "OPTIONS_GHC"
    },
    {
      "exercise": "",
      "example": "OccName"
    },
    {
      "exercise": "",
      "example": "Option"
    },
    {
      "exercise": "",
      "example": "Options"
    },
    {
      "exercise": "",
      "example": "Ord"
    },
    {
      "exercise": "",
      "example": "Outputable"
    },
    {
      "exercise": "",
      "example": "OverloadedStrings"
    },
    {
      "exercise": "",
      "example": "P"
    },
    {
      "exercise": "",
      "example": "PTerm"
    },
    {
      "exercise": "",
      "example": "Package"
    },
    {
      "exercise": "",
      "example": "PackageDescription"
    },
    {
      "exercise": "",
      "example": "PackageIndex"
    },
    {
      "exercise": "",
      "example": "PackageName"
    },
    {
      "exercise": "",
      "example": "Pandoc"
    },
    {
      "exercise": "",
      "example": "Parse"
    },
    {
      "exercise": "",
      "example": "Parsec"
    },
    {
      "exercise": "",
      "example": "Parser"
    },
    {
      "exercise": "",
      "example": "Path"
    },
    {
      "exercise": "",
      "example": "Platform"
    },
    {
      "exercise": "",
      "example": "Portability"
    },
    {
      "exercise": "",
      "example": "Prelude"
    },
    {
      "exercise": "",
      "example": "Pretty"
    },
    {
      "exercise": "",
      "example": "Process"
    },
    {
      "exercise": "",
      "example": "Proxy"
    },
    {
      "exercise": "",
      "example": "Ptr"
    },
    {
      "exercise": "",
      "example": "Q"
    },
    {
      "exercise": "",
      "example": "Qtc"
    },
    {
      "exercise": "",
      "example": "QuickCheck"
    },
    {
      "exercise": "",
      "example": "R"
    },
    {
      "exercise": "",
      "example": "RHS"
    },
    {
      "exercise": "",
      "example": "Random"
    },
    {
      "exercise": "",
      "example": "RankNTypes"
    },
    {
      "exercise": "",
      "example": "Raw"
    },
    {
      "exercise": "",
      "example": "RdrName"
    },
    {
      "exercise": "",
      "example": "Read"
    },
    {
      "exercise": "",
      "example": "Reader"
    },
    {
      "exercise": "",
      "example": "RecordWildCards"
    },
    {
      "exercise": "",
      "example": "Rendering"
    },
    {
      "exercise": "",
      "example": "Request"
    },
    {
      "exercise": "",
      "example": "Response"
    },
    {
      "exercise": "",
      "example": "Result"
    },
    {
      "exercise": "",
      "example": "Right"
    },
    {
      "exercise": "",
      "example": "RnM"
    },
    {
      "exercise": "",
      "example": "S"
    },
    {
      "exercise": "",
      "example": "SDL"
    },
    {
      "exercise": "",
      "example": "SDoc"
    },
    {
      "exercise": "",
      "example": "ST"
    },
    {
      "exercise": "",
      "example": "Safe"
    },
    {
      "exercise": "",
      "example": "ScopedTypeVariables"
    },
    {
      "exercise": "",
      "example": "See"
    },
    {
      "exercise": "",
      "example": "Seq"
    },
    {
      "exercise": "",
      "example": "Set"
    },
    {
      "exercise": "",
      "example": "Show"
    },
    {
      "exercise": "",
      "example": "Simple"
    },
    {
      "exercise": "",
      "example": "Since"
    },
    {
      "exercise": "",
      "example": "Size"
    },
    {
      "exercise": "",
      "example": "So"
    },
    {
      "exercise": "",
      "example": "SrcSpan"
    },
    {
      "exercise": "",
      "example": "Stability"
    },
    {
      "exercise": "",
      "example": "Stack"
    },
    {
      "exercise": "",
      "example": "State"
    },
    {
      "exercise": "",
      "example": "Storable"
    },
    {
      "exercise": "",
      "example": "Stream"
    },
    {
      "exercise": "",
      "example": "Strict"
    },
    {
      "exercise": "",
      "example": "String"
    },
    {
      "exercise": "",
      "example": "Syntax"
    },
    {
      "exercise": "",
      "example": "System"
    },
    {
      "exercise": "",
      "example": "T"
    },
    {
      "exercise": "",
      "example": "TH"
    },
    {
      "exercise": "",
      "example": "TODO"
    },
    {
      "exercise": "",
      "example": "Tag"
    },
    {
      "exercise": "",
      "example": "TcM"
    },
    {
      "exercise": "",
      "example": "TcS"
    },
    {
      "exercise": "",
      "example": "TcType"
    },
    {
      "exercise": "",
      "example": "TemplateHaskell"
    },
    {
      "exercise": "",
      "example": "Term"
    },
    {
      "exercise": "",
      "example": "Test"
    },
    {
      "exercise": "",
      "example": "Text"
    },
    {
      "exercise": "",
      "example": "The"
    },
    {
      "exercise": "",
      "example": "There"
    },
    {
      "exercise": "",
      "example": "These"
    },
    {
      "exercise": "",
      "example": "This"
    },
    {
      "exercise": "",
      "example": "Time"
    },
    {
      "exercise": "",
      "example": "Tip"
    },
    {
      "exercise": "",
      "example": "ToJSON"
    },
    {
      "exercise": "",
      "example": "Trac"
    },
    {
      "exercise": "",
      "example": "Trace"
    },
    {
      "exercise": "",
      "example": "Trans"
    },
    {
      "exercise": "",
      "example": "Traversable"
    },
    {
      "exercise": "",
      "example": "Tree"
    },
    {
      "exercise": "",
      "example": "True"
    },
    {
      "exercise": "",
      "example": "TyCon"
    },
    {
      "exercise": "",
      "example": "TyVar"
    },
    {
      "exercise": "",
      "example": "Type"
    },
    {
      "exercise": "",
      "example": "TypeFamilies"
    },
    {
      "exercise": "",
      "example": "TypeOperators"
    },
    {
      "exercise": "",
      "example": "Typeable"
    },
    {
      "exercise": "",
      "example": "Types"
    },
    {
      "exercise": "",
      "example": "UI"
    },
    {
      "exercise": "",
      "example": "Unique"
    },
    {
      "exercise": "",
      "example": "Unsafe"
    },
    {
      "exercise": "",
      "example": "Use"
    },
    {
      "exercise": "",
      "example": "Util"
    },
    {
      "exercise": "",
      "example": "Utils"
    },
    {
      "exercise": "",
      "example": "V"
    },
    {
      "exercise": "",
      "example": "Value"
    },
    {
      "exercise": "",
      "example": "Var"
    },
    {
      "exercise": "",
      "example": "Vector"
    },
    {
      "exercise": "",
      "example": "Verbosity"
    },
    {
      "exercise": "",
      "example": "Version"
    },
    {
      "exercise": "",
      "example": "W"
    },
    {
      "exercise": "",
      "example": "We"
    },
    {
      "exercise": "",
      "example": "When"
    },
    {
      "exercise": "",
      "example": "Word"
    },
    {
      "exercise": "",
      "example": "Word8"
    },
    {
      "exercise": "",
      "example": "Wrap"
    },
    {
      "exercise": "",
      "example": "X"
    },
    {
      "exercise": "",
      "example": "XMonad"
    },
    {
      "exercise": "",
      "example": "Yesod"
    },
    {
      "exercise": "",
      "example": "_"
    },
    {
      "exercise": "",
      "example": "__GLASGOW_HASKELL__"
    },
    {
      "exercise": "",
      "example": "_eid"
    },
    {
      "exercise": "",
      "example": "_eobj"
    },
    {
      "exercise": "",
      "example": "_handler"
    },
    {
      "exercise": "",
      "example": "a"
    },
    {
      "exercise": "",
      "example": "a1"
    },
    {
      "exercise": "",
      "example": "a2"
    },
    {
      "exercise": "",
      "example": "aa"
    },
    {
      "exercise": "",
      "example": "aaa"
    },
    {
      "exercise": "",
      "example": "aaaa"
    },
    {
      "exercise": "",
      "example": "aaaaa"
    },
    {
      "exercise": "",
      "example": "aaaaaa"
    },
    {
      "exercise": "",
      "example": "aaaaaaa"
    },
    {
      "exercise": "",
      "example": "aaaaaaaa"
    },
    {
      "exercise": "",
      "example": "aaaaaaaaa"
    },
    {
      "exercise": "",
      "example": "aaaaaaaaaa"
    },
    {
      "exercise": "",
      "example": "about"
    },
    {
      "exercise": "",
      "example": "above"
    },
    {
      "exercise": "",
      "example": "acc"
    },
    {
      "exercise": "",
      "example": "accessible"
    },
    {
      "exercise": "",
      "example": "action"
    },
    {
      "exercise": "",
      "example": "add"
    },
    {
      "exercise": "",
      "example": "addr"
    },
    {
      "exercise": "",
      "example": "after"
    },
    {
      "exercise": "",
      "example": "all"
    },
    {
      "exercise": "",
      "example": "alpha"
    },
    {
      "exercise": "",
      "example": "already"
    },
    {
      "exercise": "",
      "example": "also"
    },
    {
      "exercise": "",
      "example": "alts"
    },
    {
      "exercise": "",
      "example": "always"
    },
    {
      "exercise": "",
      "example": "an"
    },
    {
      "exercise": "",
      "example": "and"
    },
    {
      "exercise": "",
      "example": "any"
    },
    {
      "exercise": "",
      "example": "application"
    },
    {
      "exercise": "",
      "example": "apply"
    },
    {
      "exercise": "",
      "example": "arbitrary"
    },
    {
      "exercise": "",
      "example": "are"
    },
    {
      "exercise": "",
      "example": "arg"
    },
    {
      "exercise": "",
      "example": "args"
    },
    {
      "exercise": "",
      "example": "argument"
    },
    {
      "exercise": "",
      "example": "arguments"
    },
    {
      "exercise": "",
      "example": "arity"
    },
    {
      "exercise": "",
      "example": "arr"
    },
    {
      "exercise": "",
      "example": "as"
    },
    {
      "exercise": "",
      "example": "at"
    },
    {
      "exercise": "",
      "example": "auto"
    },
    {
      "exercise": "",
      "example": "available"
    },
    {
      "exercise": "",
      "example": "b"
    },
    {
      "exercise": "",
      "example": "base"
    },
    {
      "exercise": "",
      "example": "be"
    },
    {
      "exercise": "",
      "example": "because"
    },
    {
      "exercise": "",
      "example": "been"
    },
    {
      "exercise": "",
      "example": "before"
    },
    {
      "exercise": "",
      "example": "being"
    },
    {
      "exercise": "",
      "example": "between"
    },
    {
      "exercise": "",
      "example": "bh"
    },
    {
      "exercise": "",
      "example": "bi"
    },
    {
      "exercise": "",
      "example": "binary"
    },
    {
      "exercise": "",
      "example": "bind"
    },
    {
      "exercise": "",
      "example": "binder"
    },
    {
      "exercise": "",
      "example": "binders"
    },
    {
      "exercise": "",
      "example": "binding"
    },
    {
      "exercise": "",
      "example": "bindings"
    },
    {
      "exercise": "",
      "example": "binds"
    },
    {
      "exercise": "",
      "example": "bit"
    },
    {
      "exercise": "",
      "example": "block"
    },
    {
      "exercise": "",
      "example": "blocks"
    },
    {
      "exercise": "",
      "example": "bndr"
    },
    {
      "exercise": "",
      "example": "bndrs"
    },
    {
      "exercise": "",
      "example": "body"
    },
    {
      "exercise": "",
      "example": "both"
    },
    {
      "exercise": "",
      "example": "bound"
    },
    {
      "exercise": "",
      "example": "brendan"
    },
    {
      "exercise": "",
      "example": "bs"
    },
    {
      "exercise": "",
      "example": "build"
    },
    {
      "exercise": "",
      "example": "but"
    },
    {
      "exercise": "",
      "example": "by"
    },
    {
      "exercise": "",
      "example": "c"
    },
    {
      "exercise": "",
      "example": "cabal"
    },
    {
      "exercise": "",
      "example": "cache"
    },
    {
      "exercise": "",
      "example": "call"
    },
    {
      "exercise": "",
      "example": "can"
    },
    {
      "exercise": "",
      "example": "cannot"
    },
    {
      "exercise": "",
      "example": "case"
    },
    {
      "exercise": "",
      "example": "cases"
    },
    {
      "exercise": "",
      "example": "castPtrToFunPtr"
    },
    {
      "exercise": "",
      "example": "castPtrToStablePtr"
    },
    {
      "exercise": "",
      "example": "catMaybes"
    },
    {
      "exercise": "",
      "example": "catch"
    },
    {
      "exercise": "",
      "example": "change"
    },
    {
      "exercise": "",
      "example": "char"
    },
    {
      "exercise": "",
      "example": "check"
    },
    {
      "exercise": "",
      "example": "checking"
    },
    {
      "exercise": "",
      "example": "class"
    },
    {
      "exercise": "",
      "example": "cls"
    },
    {
      "exercise": "",
      "example": "cmd"
    },
    {
      "exercise": "",
      "example": "co"
    },
    {
      "exercise": "",
      "example": "cobj_eobj"
    },
    {
      "exercise": "",
      "example": "cobj_x0"
    },
    {
      "exercise": "",
      "example": "cobj_x1"
    },
    {
      "exercise": "",
      "example": "code"
    },
    {
      "exercise": "",
      "example": "coercion"
    },
    {
      "exercise": "",
      "example": "com"
    },
    {
      "exercise": "",
      "example": "combine"
    },
    {
      "exercise": "",
      "example": "command"
    },
    {
      "exercise": "",
      "example": "comp"
    },
    {
      "exercise": "",
      "example": "compare"
    },
    {
      "exercise": "",
      "example": "compile"
    },
    {
      "exercise": "",
      "example": "compiler"
    },
    {
      "exercise": "",
      "example": "con"
    },
    {
      "exercise": "",
      "example": "concat"
    },
    {
      "exercise": "",
      "example": "concatMap"
    },
    {
      "exercise": "",
      "example": "conf"
    },
    {
      "exercise": "",
      "example": "config"
    },
    {
      "exercise": "",
      "example": "cons"
    },
    {
      "exercise": "",
      "example": "const"
    },
    {
      "exercise": "",
      "example": "constraint"
    },
    {
      "exercise": "",
      "example": "constraints"
    },
    {
      "exercise": "",
      "example": "constructor"
    },
    {
      "exercise": "",
      "example": "constructors"
    },
    {
      "exercise": "",
      "example": "contains"
    },
    {
      "exercise": "",
      "example": "contents"
    },
    {
      "exercise": "",
      "example": "context"
    },
    {
      "exercise": "",
      "example": "convert"
    },
    {
      "exercise": "",
      "example": "corresponding"
    },
    {
      "exercise": "",
      "example": "could"
    },
    {
      "exercise": "",
      "example": "count"
    },
    {
      "exercise": "",
      "example": "create"
    },
    {
      "exercise": "",
      "example": "cs"
    },
    {
      "exercise": "",
      "example": "ct"
    },
    {
      "exercise": "",
      "example": "ctxt"
    },
    {
      "exercise": "",
      "example": "current"
    },
    {
      "exercise": "",
      "example": "d"
    },
    {
      "exercise": "",
      "example": "data"
    },
    {
      "exercise": "",
      "example": "db"
    },
    {
      "exercise": "",
      "example": "dc"
    },
    {
      "exercise": "",
      "example": "decl"
    },
    {
      "exercise": "",
      "example": "declaration"
    },
    {
      "exercise": "",
      "example": "declarations"
    },
    {
      "exercise": "",
      "example": "decls"
    },
    {
      "exercise": "",
      "example": "def"
    },
    {
      "exercise": "",
      "example": "defGhcFlag"
    },
    {
      "exercise": "",
      "example": "default"
    },
    {
      "exercise": "",
      "example": "defined"
    },
    {
      "exercise": "",
      "example": "definition"
    },
    {
      "exercise": "",
      "example": "dependencies"
    },
    {
      "exercise": "",
      "example": "deps"
    },
    {
      "exercise": "",
      "example": "deriving"
    },
    {
      "exercise": "",
      "example": "desired"
    },
    {
      "exercise": "",
      "example": "details"
    },
    {
      "exercise": "",
      "example": "dflags"
    },
    {
      "exercise": "",
      "example": "different"
    },
    {
      "exercise": "",
      "example": "dir"
    },
    {
      "exercise": "",
      "example": "directory"
    },
    {
      "exercise": "",
      "example": "display"
    },
    {
      "exercise": "",
      "example": "do"
    },
    {
      "exercise": "",
      "example": "doc"
    },
    {
      "exercise": "",
      "example": "does"
    },
    {
      "exercise": "",
      "example": "doesn"
    },
    {
      "exercise": "",
      "example": "don"
    },
    {
      "exercise": "",
      "example": "done"
    },
    {
      "exercise": "",
      "example": "drop"
    },
    {
      "exercise": "",
      "example": "ds"
    },
    {
      "exercise": "",
      "example": "dst"
    },
    {
      "exercise": "",
      "example": "e"
    },
    {
      "exercise": "",
      "example": "e1"
    },
    {
      "exercise": "",
      "example": "e2"
    },
    {
      "exercise": "",
      "example": "each"
    },
    {
      "exercise": "",
      "example": "either"
    },
    {
      "exercise": "",
      "example": "elem"
    },
    {
      "exercise": "",
      "example": "element"
    },
    {
      "exercise": "",
      "example": "elements"
    },
    {
      "exercise": "",
      "example": "else"
    },
    {
      "exercise": "",
      "example": "empty"
    },
    {
      "exercise": "",
      "example": "end"
    },
    {
      "exercise": "",
      "example": "endif"
    },
    {
      "exercise": "",
      "example": "entry"
    },
    {
      "exercise": "",
      "example": "env"
    },
    {
      "exercise": "",
      "example": "environment"
    },
    {
      "exercise": "",
      "example": "equality"
    },
    {
      "exercise": "",
      "example": "err"
    },
    {
      "exercise": "",
      "example": "error"
    },
    {
      "exercise": "",
      "example": "errors"
    },
    {
      "exercise": "",
      "example": "es"
    },
    {
      "exercise": "",
      "example": "etc"
    },
    {
      "exercise": "",
      "example": "ev"
    },
    {
      "exercise": "",
      "example": "even"
    },
    {
      "exercise": "",
      "example": "example"
    },
    {
      "exercise": "",
      "example": "exception"
    },
    {
      "exercise": "",
      "example": "exists"
    },
    {
      "exercise": "",
      "example": "expected"
    },
    {
      "exercise": "",
      "example": "experimental"
    },
    {
      "exercise": "",
      "example": "exports"
    },
    {
      "exercise": "",
      "example": "expr"
    },
    {
      "exercise": "",
      "example": "expression"
    },
    {
      "exercise": "",
      "example": "extensions"
    },
    {
      "exercise": "",
      "example": "extra"
    },
    {
      "exercise": "",
      "example": "f"
    },
    {
      "exercise": "",
      "example": "fail"
    },
    {
      "exercise": "",
      "example": "family"
    },
    {
      "exercise": "",
      "example": "fc"
    },
    {
      "exercise": "",
      "example": "field"
    },
    {
      "exercise": "",
      "example": "fields"
    },
    {
      "exercise": "",
      "example": "file"
    },
    {
      "exercise": "",
      "example": "filename"
    },
    {
      "exercise": "",
      "example": "files"
    },
    {
      "exercise": "",
      "example": "filter"
    },
    {
      "exercise": "",
      "example": "find"
    },
    {
      "exercise": "",
      "example": "first"
    },
    {
      "exercise": "",
      "example": "flag"
    },
    {
      "exercise": "",
      "example": "flagSpec"
    },
    {
      "exercise": "",
      "example": "flags"
    },
    {
      "exercise": "",
      "example": "fmap"
    },
    {
      "exercise": "",
      "example": "fn"
    },
    {
      "exercise": "",
      "example": "fno"
    },
    {
      "exercise": "",
      "example": "foldl"
    },
    {
      "exercise": "",
      "example": "foldr"
    },
    {
      "exercise": "",
      "example": "following"
    },
    {
      "exercise": "",
      "example": "foo"
    },
    {
      "exercise": "",
      "example": "for"
    },
    {
      "exercise": "",
      "example": "forall"
    },
    {
      "exercise": "",
      "example": "foreign"
    },
    {
      "exercise": "",
      "example": "form"
    },
    {
      "exercise": "",
      "example": "format"
    },
    {
      "exercise": "",
      "example": "found"
    },
    {
      "exercise": "",
      "example": "fp"
    },
    {
      "exercise": "",
      "example": "free"
    },
    {
      "exercise": "",
      "example": "freeHaskellFunPtr"
    },
    {
      "exercise": "",
      "example": "freeStablePtr"
    },
    {
      "exercise": "",
      "example": "from"
    },
    {
      "exercise": "",
      "example": "fromIntegral"
    },
    {
      "exercise": "",
      "example": "fromList"
    },
    {
      "exercise": "",
      "example": "fromMaybe"
    },
    {
      "exercise": "",
      "example": "fs"
    },
    {
      "exercise": "",
      "example": "fsLit"
    },
    {
      "exercise": "",
      "example": "fst"
    },
    {
      "exercise": "",
      "example": "ft"
    },
    {
      "exercise": "",
      "example": "fun"
    },
    {
      "exercise": "",
      "example": "fun_d"
    },
    {
      "exercise": "",
      "example": "function"
    },
    {
      "exercise": "",
      "example": "functions"
    },
    {
      "exercise": "",
      "example": "funptr"
    },
    {
      "exercise": "",
      "example": "funptr_d"
    },
    {
      "exercise": "",
      "example": "fvs"
    },
    {
      "exercise": "",
      "example": "g"
    },
    {
      "exercise": "",
      "example": "generate"
    },
    {
      "exercise": "",
      "example": "generated"
    },
    {
      "exercise": "",
      "example": "get"
    },
    {
      "exercise": "",
      "example": "getArgs"
    },
    {
      "exercise": "",
      "example": "getDynFlags"
    },
    {
      "exercise": "",
      "example": "getIState"
    },
    {
      "exercise": "",
      "example": "gets"
    },
    {
      "exercise": "",
      "example": "ghc"
    },
    {
      "exercise": "",
      "example": "given"
    },
    {
      "exercise": "",
      "example": "global"
    },
    {
      "exercise": "",
      "example": "gmail"
    },
    {
      "exercise": "",
      "example": "go"
    },
    {
      "exercise": "",
      "example": "group"
    },
    {
      "exercise": "",
      "example": "h"
    },
    {
      "exercise": "",
      "example": "handle"
    },
    {
      "exercise": "",
      "example": "hang"
    },
    {
      "exercise": "",
      "example": "happy_var_1"
    },
    {
      "exercise": "",
      "example": "has"
    },
    {
      "exercise": "",
      "example": "haskell"
    },
    {
      "exercise": "",
      "example": "have"
    },
    {
      "exercise": "",
      "example": "hay"
    },
    {
      "exercise": "",
      "example": "head"
    },
    {
      "exercise": "",
      "example": "header"
    },
    {
      "exercise": "",
      "example": "help"
    },
    {
      "exercise": "",
      "example": "here"
    },
    {
      "exercise": "",
      "example": "hiding"
    },
    {
      "exercise": "",
      "example": "hs"
    },
    {
      "exercise": "",
      "example": "hsc_env"
    },
    {
      "exercise": "",
      "example": "html"
    },
    {
      "exercise": "",
      "example": "http"
    },
    {
      "exercise": "",
      "example": "https"
    },
    {
      "exercise": "",
      "example": "i"
    },
    {
      "exercise": "",
      "example": "id"
    },
    {
      "exercise": "",
      "example": "ids"
    },
    {
      "exercise": "",
      "example": "if"
    },
    {
      "exercise": "",
      "example": "iface"
    },
    {
      "exercise": "",
      "example": "ifdef"
    },
    {
      "exercise": "",
      "example": "iis"
    },
    {
      "exercise": "",
      "example": "implicit"
    },
    {
      "exercise": "",
      "example": "import"
    },
    {
      "exercise": "",
      "example": "imported"
    },
    {
      "exercise": "",
      "example": "imports"
    },
    {
      "exercise": "",
      "example": "in"
    },
    {
      "exercise": "",
      "example": "include"
    },
    {
      "exercise": "",
      "example": "index"
    },
    {
      "exercise": "",
      "example": "info"
    },
    {
      "exercise": "",
      "example": "information"
    },
    {
      "exercise": "",
      "example": "inline"
    },
    {
      "exercise": "",
      "example": "input"
    },
    {
      "exercise": "",
      "example": "insert"
    },
    {
      "exercise": "",
      "example": "inside"
    },
    {
      "exercise": "",
      "example": "inst"
    },
    {
      "exercise": "",
      "example": "install"
    },
    {
      "exercise": "",
      "example": "installed"
    },
    {
      "exercise": "",
      "example": "instance"
    },
    {
      "exercise": "",
      "example": "instances"
    },
    {
      "exercise": "",
      "example": "instead"
    },
    {
      "exercise": "",
      "example": "instr"
    },
    {
      "exercise": "",
      "example": "int"
    },
    {
      "exercise": "",
      "example": "intercalate"
    },
    {
      "exercise": "",
      "example": "interface"
    },
    {
      "exercise": "",
      "example": "into"
    },
    {
      "exercise": "",
      "example": "is"
    },
    {
      "exercise": "",
      "example": "ist"
    },
    {
      "exercise": "",
      "example": "it"
    },
    {
      "exercise": "",
      "example": "item"
    },
    {
      "exercise": "",
      "example": "its"
    },
    {
      "exercise": "",
      "example": "j"
    },
    {
      "exercise": "",
      "example": "just"
    },
    {
      "exercise": "",
      "example": "k"
    },
    {
      "exercise": "",
      "example": "k1"
    },
    {
      "exercise": "",
      "example": "key"
    },
    {
      "exercise": "",
      "example": "kind"
    },
    {
      "exercise": "",
      "example": "know"
    },
    {
      "exercise": "",
      "example": "kx"
    },
    {
      "exercise": "",
      "example": "l"
    },
    {
      "exercise": "",
      "example": "label"
    },
    {
      "exercise": "",
      "example": "language"
    },
    {
      "exercise": "",
      "example": "last"
    },
    {
      "exercise": "",
      "example": "lbi"
    },
    {
      "exercise": "",
      "example": "lbl"
    },
    {
      "exercise": "",
      "example": "left"
    },
    {
      "exercise": "",
      "example": "len"
    },
    {
      "exercise": "",
      "example": "length"
    },
    {
      "exercise": "",
      "example": "lenses"
    },
    {
      "exercise": "",
      "example": "let"
    },
    {
      "exercise": "",
      "example": "level"
    },
    {
      "exercise": "",
      "example": "lhs"
    },
    {
      "exercise": "",
      "example": "lib"
    },
    {
      "exercise": "",
      "example": "library"
    },
    {
      "exercise": "",
      "example": "lift"
    },
    {
      "exercise": "",
      "example": "liftIO"
    },
    {
      "exercise": "",
      "example": "liftM"
    },
    {
      "exercise": "",
      "example": "like"
    },
    {
      "exercise": "",
      "example": "line"
    },
    {
      "exercise": "",
      "example": "link"
    },
    {
      "exercise": "",
      "example": "list"
    },
    {
      "exercise": "",
      "example": "lit"
    },
    {
      "exercise": "",
      "example": "ll"
    },
    {
      "exercise": "",
      "example": "loc"
    },
    {
      "exercise": "",
      "example": "local"
    },
    {
      "exercise": "",
      "example": "location"
    },
    {
      "exercise": "",
      "example": "log"
    },
    {
      "exercise": "",
      "example": "look"
    },
    {
      "exercise": "",
      "example": "lookup"
    },
    {
      "exercise": "",
      "example": "loop"
    },
    {
      "exercise": "",
      "example": "m"
    },
    {
      "exercise": "",
      "example": "m1"
    },
    {
      "exercise": "",
      "example": "m2"
    },
    {
      "exercise": "",
      "example": "main"
    },
    {
      "exercise": "",
      "example": "make"
    },
    {
      "exercise": "",
      "example": "many"
    },
    {
      "exercise": "",
      "example": "map"
    },
    {
      "exercise": "",
      "example": "mapM"
    },
    {
      "exercise": "",
      "example": "mapM_"
    },
    {
      "exercise": "",
      "example": "mappend"
    },
    {
      "exercise": "",
      "example": "match"
    },
    {
      "exercise": "",
      "example": "matches"
    },
    {
      "exercise": "",
      "example": "maybe"
    },
    {
      "exercise": "",
      "example": "mconcat"
    },
    {
      "exercise": "",
      "example": "means"
    },
    {
      "exercise": "",
      "example": "member"
    },
    {
      "exercise": "",
      "example": "mempty"
    },
    {
      "exercise": "",
      "example": "message"
    },
    {
      "exercise": "",
      "example": "method"
    },
    {
      "exercise": "",
      "example": "might"
    },
    {
      "exercise": "",
      "example": "missing"
    },
    {
      "exercise": "",
      "example": "mkPreludeMiscIdUnique"
    },
    {
      "exercise": "",
      "example": "mod"
    },
    {
      "exercise": "",
      "example": "mode"
    },
    {
      "exercise": "",
      "example": "modify"
    },
    {
      "exercise": "",
      "example": "module"
    },
    {
      "exercise": "",
      "example": "modules"
    },
    {
      "exercise": "",
      "example": "monad"
    },
    {
      "exercise": "",
      "example": "more"
    },
    {
      "exercise": "",
      "example": "ms"
    },
    {
      "exercise": "",
      "example": "msg"
    },
    {
      "exercise": "",
      "example": "must"
    },
    {
      "exercise": "",
      "example": "mzero"
    },
    {
      "exercise": "",
      "example": "n"
    },
    {
      "exercise": "",
      "example": "name"
    },
    {
      "exercise": "",
      "example": "names"
    },
    {
      "exercise": "",
      "example": "need"
    },
    {
      "exercise": "",
      "example": "needed"
    },
    {
      "exercise": "",
      "example": "nest"
    },
    {
      "exercise": "",
      "example": "never"
    },
    {
      "exercise": "",
      "example": "new"
    },
    {
      "exercise": "",
      "example": "newStablePtr"
    },
    {
      "exercise": "",
      "example": "newtype"
    },
    {
      "exercise": "",
      "example": "next"
    },
    {
      "exercise": "",
      "example": "nm"
    },
    {
      "exercise": "",
      "example": "no"
    },
    {
      "exercise": "",
      "example": "node"
    },
    {
      "exercise": "",
      "example": "non"
    },
    {
      "exercise": "",
      "example": "not"
    },
    {
      "exercise": "",
      "example": "note"
    },
    {
      "exercise": "",
      "example": "now"
    },
    {
      "exercise": "",
      "example": "ns"
    },
    {
      "exercise": "",
      "example": "null"
    },
    {
      "exercise": "",
      "example": "number"
    },
    {
      "exercise": "",
      "example": "o"
    },
    {
      "exercise": "",
      "example": "object"
    },
    {
      "exercise": "",
      "example": "objectIsNull"
    },
    {
      "exercise": "",
      "example": "occ"
    },
    {
      "exercise": "",
      "example": "of"
    },
    {
      "exercise": "",
      "example": "off"
    },
    {
      "exercise": "",
      "example": "ok"
    },
    {
      "exercise": "",
      "example": "old"
    },
    {
      "exercise": "",
      "example": "on"
    },
    {
      "exercise": "",
      "example": "one"
    },
    {
      "exercise": "",
      "example": "only"
    },
    {
      "exercise": "",
      "example": "op"
    },
    {
      "exercise": "",
      "example": "opt"
    },
    {
      "exercise": "",
      "example": "option"
    },
    {
      "exercise": "",
      "example": "optional"
    },
    {
      "exercise": "",
      "example": "options"
    },
    {
      "exercise": "",
      "example": "opts"
    },
    {
      "exercise": "",
      "example": "or"
    },
    {
      "exercise": "",
      "example": "order"
    },
    {
      "exercise": "",
      "example": "org"
    },
    {
      "exercise": "",
      "example": "original"
    },
    {
      "exercise": "",
      "example": "other"
    },
    {
      "exercise": "",
      "example": "otherwise"
    },
    {
      "exercise": "",
      "example": "out"
    },
    {
      "exercise": "",
      "example": "output"
    },
    {
      "exercise": "",
      "example": "over"
    },
    {
      "exercise": "",
      "example": "p"
    },
    {
      "exercise": "",
      "example": "p1"
    },
    {
      "exercise": "",
      "example": "pack"
    },
    {
      "exercise": "",
      "example": "package"
    },
    {
      "exercise": "",
      "example": "packages"
    },
    {
      "exercise": "",
      "example": "panic"
    },
    {
      "exercise": "",
      "example": "parameter"
    },
    {
      "exercise": "",
      "example": "params"
    },
    {
      "exercise": "",
      "example": "parens"
    },
    {
      "exercise": "",
      "example": "parent"
    },
    {
      "exercise": "",
      "example": "parse"
    },
    {
      "exercise": "",
      "example": "parseJSON"
    },
    {
      "exercise": "",
      "example": "parser"
    },
    {
      "exercise": "",
      "example": "part"
    },
    {
      "exercise": "",
      "example": "pass"
    },
    {
      "exercise": "",
      "example": "pat"
    },
    {
      "exercise": "",
      "example": "path"
    },
    {
      "exercise": "",
      "example": "pats"
    },
    {
      "exercise": "",
      "example": "pattern"
    },
    {
      "exercise": "",
      "example": "patterns"
    },
    {
      "exercise": "",
      "example": "pkg"
    },
    {
      "exercise": "",
      "example": "pkgs"
    },
    {
      "exercise": "",
      "example": "platform"
    },
    {
      "exercise": "",
      "example": "point"
    },
    {
      "exercise": "",
      "example": "portable"
    },
    {
      "exercise": "",
      "example": "pos"
    },
    {
      "exercise": "",
      "example": "possible"
    },
    {
      "exercise": "",
      "example": "ppr"
    },
    {
      "exercise": "",
      "example": "pprPanic"
    },
    {
      "exercise": "",
      "example": "pred"
    },
    {
      "exercise": "",
      "example": "predicate"
    },
    {
      "exercise": "",
      "example": "prefix"
    },
    {
      "exercise": "",
      "example": "pretty"
    },
    {
      "exercise": "",
      "example": "print"
    },
    {
      "exercise": "",
      "example": "process"
    },
    {
      "exercise": "",
      "example": "program"
    },
    {
      "exercise": "",
      "example": "provisional"
    },
    {
      "exercise": "",
      "example": "ps"
    },
    {
      "exercise": "",
      "example": "ptext"
    },
    {
      "exercise": "",
      "example": "ptr"
    },
    {
      "exercise": "",
      "example": "ptrNull"
    },
    {
      "exercise": "",
      "example": "pure"
    },
    {
      "exercise": "",
      "example": "put"
    },
    {
      "exercise": "",
      "example": "putStrLn"
    },
    {
      "exercise": "",
      "example": "putWord8"
    },
    {
      "exercise": "",
      "example": "put_"
    },
    {
      "exercise": "",
      "example": "q"
    },
    {
      "exercise": "",
      "example": "qobj"
    },
    {
      "exercise": "",
      "example": "qualified"
    },
    {
      "exercise": "",
      "example": "quotes"
    },
    {
      "exercise": "",
      "example": "r"
    },
    {
      "exercise": "",
      "example": "rather"
    },
    {
      "exercise": "",
      "example": "re"
    },
    {
      "exercise": "",
      "example": "read"
    },
    {
      "exercise": "",
      "example": "really"
    },
    {
      "exercise": "",
      "example": "reason"
    },
    {
      "exercise": "",
      "example": "record"
    },
    {
      "exercise": "",
      "example": "recursive"
    },
    {
      "exercise": "",
      "example": "ref"
    },
    {
      "exercise": "",
      "example": "reg"
    },
    {
      "exercise": "",
      "example": "rep"
    },
    {
      "exercise": "",
      "example": "representation"
    },
    {
      "exercise": "",
      "example": "request"
    },
    {
      "exercise": "",
      "example": "res"
    },
    {
      "exercise": "",
      "example": "res_ty"
    },
    {
      "exercise": "",
      "example": "response"
    },
    {
      "exercise": "",
      "example": "rest"
    },
    {
      "exercise": "",
      "example": "result"
    },
    {
      "exercise": "",
      "example": "results"
    },
    {
      "exercise": "",
      "example": "return"
    },
    {
      "exercise": "",
      "example": "returned"
    },
    {
      "exercise": "",
      "example": "returns"
    },
    {
      "exercise": "",
      "example": "reverse"
    },
    {
      "exercise": "",
      "example": "rhs"
    },
    {
      "exercise": "",
      "example": "right"
    },
    {
      "exercise": "",
      "example": "rnf"
    },
    {
      "exercise": "",
      "example": "role"
    },
    {
      "exercise": "",
      "example": "rs"
    },
    {
      "exercise": "",
      "example": "rule"
    },
    {
      "exercise": "",
      "example": "rules"
    },
    {
      "exercise": "",
      "example": "run"
    },
    {
      "exercise": "",
      "example": "rv"
    },
    {
      "exercise": "",
      "example": "rvf"
    },
    {
      "exercise": "",
      "example": "s"
    },
    {
      "exercise": "",
      "example": "s1"
    },
    {
      "exercise": "",
      "example": "s2"
    },
    {
      "exercise": "",
      "example": "sLit"
    },
    {
      "exercise": "",
      "example": "safe"
    },
    {
      "exercise": "",
      "example": "same"
    },
    {
      "exercise": "",
      "example": "sc"
    },
    {
      "exercise": "",
      "example": "scope"
    },
    {
      "exercise": "",
      "example": "second"
    },
    {
      "exercise": "",
      "example": "see"
    },
    {
      "exercise": "",
      "example": "self"
    },
    {
      "exercise": "",
      "example": "sep"
    },
    {
      "exercise": "",
      "example": "seq"
    },
    {
      "exercise": "",
      "example": "sequence"
    },
    {
      "exercise": "",
      "example": "set"
    },
    {
      "exercise": "",
      "example": "setHandlerWrapper"
    },
    {
      "exercise": "",
      "example": "setHandlerWrapper_d"
    },
    {
      "exercise": "",
      "example": "settings"
    },
    {
      "exercise": "",
      "example": "should"
    },
    {
      "exercise": "",
      "example": "show"
    },
    {
      "exercise": "",
      "example": "signature"
    },
    {
      "exercise": "",
      "example": "since"
    },
    {
      "exercise": "",
      "example": "single"
    },
    {
      "exercise": "",
      "example": "singleton"
    },
    {
      "exercise": "",
      "example": "size"
    },
    {
      "exercise": "",
      "example": "snd"
    },
    {
      "exercise": "",
      "example": "so"
    },
    {
      "exercise": "",
      "example": "some"
    },
    {
      "exercise": "",
      "example": "sort"
    },
    {
      "exercise": "",
      "example": "source"
    },
    {
      "exercise": "",
      "example": "space"
    },
    {
      "exercise": "",
      "example": "spaces"
    },
    {
      "exercise": "",
      "example": "span"
    },
    {
      "exercise": "",
      "example": "spec"
    },
    {
      "exercise": "",
      "example": "specified"
    },
    {
      "exercise": "",
      "example": "split"
    },
    {
      "exercise": "",
      "example": "src"
    },
    {
      "exercise": "",
      "example": "ss"
    },
    {
      "exercise": "",
      "example": "st"
    },
    {
      "exercise": "",
      "example": "stack"
    },
    {
      "exercise": "",
      "example": "start"
    },
    {
      "exercise": "",
      "example": "state"
    },
    {
      "exercise": "",
      "example": "static"
    },
    {
      "exercise": "",
      "example": "status"
    },
    {
      "exercise": "",
      "example": "stdout"
    },
    {
      "exercise": "",
      "example": "step"
    },
    {
      "exercise": "",
      "example": "stk"
    },
    {
      "exercise": "",
      "example": "stmts"
    },
    {
      "exercise": "",
      "example": "stptr"
    },
    {
      "exercise": "",
      "example": "str"
    },
    {
      "exercise": "",
      "example": "strict"
    },
    {
      "exercise": "",
      "example": "string"
    },
    {
      "exercise": "",
      "example": "stuff"
    },
    {
      "exercise": "",
      "example": "style"
    },
    {
      "exercise": "",
      "example": "subsection"
    },
    {
      "exercise": "",
      "example": "subst"
    },
    {
      "exercise": "",
      "example": "such"
    },
    {
      "exercise": "",
      "example": "sure"
    },
    {
      "exercise": "",
      "example": "syn"
    },
    {
      "exercise": "",
      "example": "syntax"
    },
    {
      "exercise": "",
      "example": "t"
    },
    {
      "exercise": "",
      "example": "t1"
    },
    {
      "exercise": "",
      "example": "t2"
    },
    {
      "exercise": "",
      "example": "table"
    },
    {
      "exercise": "",
      "example": "tag"
    },
    {
      "exercise": "",
      "example": "take"
    },
    {
      "exercise": "",
      "example": "target"
    },
    {
      "exercise": "",
      "example": "tc"
    },
    {
      "exercise": "",
      "example": "term"
    },
    {
      "exercise": "",
      "example": "test"
    },
    {
      "exercise": "",
      "example": "tests"
    },
    {
      "exercise": "",
      "example": "text"
    },
    {
      "exercise": "",
      "example": "than"
    },
    {
      "exercise": "",
      "example": "that"
    },
    {
      "exercise": "",
      "example": "the"
    },
    {
      "exercise": "",
      "example": "their"
    },
    {
      "exercise": "",
      "example": "them"
    },
    {
      "exercise": "",
      "example": "then"
    },
    {
      "exercise": "",
      "example": "there"
    },
    {
      "exercise": "",
      "example": "these"
    },
    {
      "exercise": "",
      "example": "theta"
    },
    {
      "exercise": "",
      "example": "they"
    },
    {
      "exercise": "",
      "example": "thing"
    },
    {
      "exercise": "",
      "example": "thing_inside"
    },
    {
      "exercise": "",
      "example": "things"
    },
    {
      "exercise": "",
      "example": "this"
    },
    {
      "exercise": "",
      "example": "through"
    },
    {
      "exercise": "",
      "example": "time"
    },
    {
      "exercise": "",
      "example": "tk"
    },
    {
      "exercise": "",
      "example": "tm"
    },
    {
      "exercise": "",
      "example": "to"
    },
    {
      "exercise": "",
      "example": "toJSON"
    },
    {
      "exercise": "",
      "example": "toList"
    },
    {
      "exercise": "",
      "example": "toPath"
    },
    {
      "exercise": "",
      "example": "too"
    },
    {
      "exercise": "",
      "example": "top"
    },
    {
      "exercise": "",
      "example": "tree"
    },
    {
      "exercise": "",
      "example": "try"
    },
    {
      "exercise": "",
      "example": "ts"
    },
    {
      "exercise": "",
      "example": "tv"
    },
    {
      "exercise": "",
      "example": "tvs"
    },
    {
      "exercise": "",
      "example": "two"
    },
    {
      "exercise": "",
      "example": "txt"
    },
    {
      "exercise": "",
      "example": "ty"
    },
    {
      "exercise": "",
      "example": "ty1"
    },
    {
      "exercise": "",
      "example": "ty2"
    },
    {
      "exercise": "",
      "example": "tycon"
    },
    {
      "exercise": "",
      "example": "type"
    },
    {
      "exercise": "",
      "example": "types"
    },
    {
      "exercise": "",
      "example": "tys"
    },
    {
      "exercise": "",
      "example": "tyvars"
    },
    {
      "exercise": "",
      "example": "u"
    },
    {
      "exercise": "",
      "example": "unLoc"
    },
    {
      "exercise": "",
      "example": "undefined"
    },
    {
      "exercise": "",
      "example": "unless"
    },
    {
      "exercise": "",
      "example": "unlines"
    },
    {
      "exercise": "",
      "example": "unpack"
    },
    {
      "exercise": "",
      "example": "unsafe"
    },
    {
      "exercise": "",
      "example": "unused"
    },
    {
      "exercise": "",
      "example": "up"
    },
    {
      "exercise": "",
      "example": "update"
    },
    {
      "exercise": "",
      "example": "us"
    },
    {
      "exercise": "",
      "example": "usage"
    },
    {
      "exercise": "",
      "example": "use"
    },
    {
      "exercise": "",
      "example": "used"
    },
    {
      "exercise": "",
      "example": "user"
    },
    {
      "exercise": "",
      "example": "uses"
    },
    {
      "exercise": "",
      "example": "using"
    },
    {
      "exercise": "",
      "example": "v"
    },
    {
      "exercise": "",
      "example": "v1"
    },
    {
      "exercise": "",
      "example": "val"
    },
    {
      "exercise": "",
      "example": "value"
    },
    {
      "exercise": "",
      "example": "values"
    },
    {
      "exercise": "",
      "example": "var"
    },
    {
      "exercise": "",
      "example": "variable"
    },
    {
      "exercise": "",
      "example": "variables"
    },
    {
      "exercise": "",
      "example": "vars"
    },
    {
      "exercise": "",
      "example": "vcat"
    },
    {
      "exercise": "",
      "example": "vector"
    },
    {
      "exercise": "",
      "example": "verbosity"
    },
    {
      "exercise": "",
      "example": "version"
    },
    {
      "exercise": "",
      "example": "view"
    },
    {
      "exercise": "",
      "example": "void"
    },
    {
      "exercise": "",
      "example": "vs"
    },
    {
      "exercise": "",
      "example": "w"
    },
    {
      "exercise": "",
      "example": "want"
    },
    {
      "exercise": "",
      "example": "warn"
    },
    {
      "exercise": "",
      "example": "was"
    },
    {
      "exercise": "",
      "example": "way"
    },
    {
      "exercise": "",
      "example": "we"
    },
    {
      "exercise": "",
      "example": "what"
    },
    {
      "exercise": "",
      "example": "when"
    },
    {
      "exercise": "",
      "example": "where"
    },
    {
      "exercise": "",
      "example": "whether"
    },
    {
      "exercise": "",
      "example": "which"
    },
    {
      "exercise": "",
      "example": "width"
    },
    {
      "exercise": "",
      "example": "will"
    },
    {
      "exercise": "",
      "example": "with"
    },
    {
      "exercise": "",
      "example": "withBoolResult"
    },
    {
      "exercise": "",
      "example": "withCWString"
    },
    {
      "exercise": "",
      "example": "withObjectPtr"
    },
    {
      "exercise": "",
      "example": "without"
    },
    {
      "exercise": "",
      "example": "work"
    },
    {
      "exercise": "",
      "example": "would"
    },
    {
      "exercise": "",
      "example": "write"
    },
    {
      "exercise": "",
      "example": "x"
    },
    {
      "exercise": "",
      "example": "x0"
    },
    {
      "exercise": "",
      "example": "x0obj"
    },
    {
      "exercise": "",
      "example": "x1"
    },
    {
      "exercise": "",
      "example": "x2"
    },
    {
      "exercise": "",
      "example": "x3"
    },
    {
      "exercise": "",
      "example": "x4"
    },
    {
      "exercise": "",
      "example": "xs"
    },
    {
      "exercise": "",
      "example": "y"
    },
    {
      "exercise": "",
      "example": "you"
    },
    {
      "exercise": "",
      "example": "your"
    },
    {
      "exercise": "",
      "example": "ys"
    },
    {
      "exercise": "",
      "example": "z"
    },
    {
      "exercise": "",
      "example": "zip"
    },
    {
      "exercise": "",
      "example": "~"
    }
  ]
}
